
Electric_heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00002d7a  00002e0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800170  00800170  00002f1e  2**0
                  ALLOC
  3 .stab         000027a8  00000000  00000000  00002f20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e36  00000000  00000000  000056c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000064fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000669e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000688e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00008c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000a011  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b1ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000b3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000b69f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c06d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <main>
      8a:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 94 16 	jmp	0x2d28	; 0x2d28 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <ADC1_Init>:
#include <util/delay.h>
#include <stdlib.h>
#include "utilites.h"

void ADC1_Init()
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(DDRA, 3);			/* Make ADC port as input */
     e00:	aa e3       	ldi	r26, 0x3A	; 58
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	ea e3       	ldi	r30, 0x3A	; 58
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	87 7f       	andi	r24, 0xF7	; 247
     e0c:	8c 93       	st	X, r24
	ADCSRA = 0x86;			/* Enable ADC, fr/64  */
     e0e:	e6 e2       	ldi	r30, 0x26	; 38
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	86 e8       	ldi	r24, 0x86	; 134
     e14:	80 83       	st	Z, r24
	ADMUX = 0x40;			/* Vref: Avcc, ADC channel: 0 */ /*ADMUX: 01000010*/
     e16:	e7 e2       	ldi	r30, 0x27	; 39
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 e4       	ldi	r24, 0x40	; 64
     e1c:	80 83       	st	Z, r24
	
}
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <ADC1_Read>:

int ADC1_Read(char channel)
{
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	6d 97       	sbiw	r28, 0x1d	; 29
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
     e38:	8d 8f       	std	Y+29, r24	; 0x1d
	int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
     e3a:	a7 e2       	ldi	r26, 0x27	; 39
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e7 e2       	ldi	r30, 0x27	; 39
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	98 2f       	mov	r25, r24
     e46:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e48:	8f 70       	andi	r24, 0x0F	; 15
     e4a:	89 2b       	or	r24, r25
     e4c:	8c 93       	st	X, r24

	ADCSRA |= (1<<ADSC);		/* Start conversion */
     e4e:	a6 e2       	ldi	r26, 0x26	; 38
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e6 e2       	ldi	r30, 0x26	; 38
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	80 64       	ori	r24, 0x40	; 64
     e5a:	8c 93       	st	X, r24
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
     e5c:	e6 e2       	ldi	r30, 0x26	; 38
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	80 71       	andi	r24, 0x10	; 16
     e68:	90 70       	andi	r25, 0x00	; 0
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	b9 f3       	breq	.-18     	; 0xe5c <ADC1_Read+0x38>
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	a0 e2       	ldi	r26, 0x20	; 32
     e74:	b1 e4       	ldi	r27, 0x41	; 65
     e76:	8d 8b       	std	Y+21, r24	; 0x15
     e78:	9e 8b       	std	Y+22, r25	; 0x16
     e7a:	af 8b       	std	Y+23, r26	; 0x17
     e7c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e7e:	6d 89       	ldd	r22, Y+21	; 0x15
     e80:	7e 89       	ldd	r23, Y+22	; 0x16
     e82:	8f 89       	ldd	r24, Y+23	; 0x17
     e84:	98 8d       	ldd	r25, Y+24	; 0x18
     e86:	2b ea       	ldi	r18, 0xAB	; 171
     e88:	3a ea       	ldi	r19, 0xAA	; 170
     e8a:	4a ea       	ldi	r20, 0xAA	; 170
     e8c:	5e e3       	ldi	r21, 0x3E	; 62
     e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	89 8b       	std	Y+17, r24	; 0x11
     e98:	9a 8b       	std	Y+18, r25	; 0x12
     e9a:	ab 8b       	std	Y+19, r26	; 0x13
     e9c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     e9e:	69 89       	ldd	r22, Y+17	; 0x11
     ea0:	7a 89       	ldd	r23, Y+18	; 0x12
     ea2:	8b 89       	ldd	r24, Y+19	; 0x13
     ea4:	9c 89       	ldd	r25, Y+20	; 0x14
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e8       	ldi	r20, 0x80	; 128
     eac:	5f e3       	ldi	r21, 0x3F	; 63
     eae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     eb2:	88 23       	and	r24, r24
     eb4:	1c f4       	brge	.+6      	; 0xebc <ADC1_Read+0x98>
		__ticks = 1;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	88 8b       	std	Y+16, r24	; 0x10
     eba:	91 c0       	rjmp	.+290    	; 0xfde <ADC1_Read+0x1ba>
	else if (__tmp > 255)
     ebc:	69 89       	ldd	r22, Y+17	; 0x11
     ebe:	7a 89       	ldd	r23, Y+18	; 0x12
     ec0:	8b 89       	ldd	r24, Y+19	; 0x13
     ec2:	9c 89       	ldd	r25, Y+20	; 0x14
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	4f e7       	ldi	r20, 0x7F	; 127
     eca:	53 e4       	ldi	r21, 0x43	; 67
     ecc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ed0:	18 16       	cp	r1, r24
     ed2:	0c f0       	brlt	.+2      	; 0xed6 <ADC1_Read+0xb2>
     ed4:	7b c0       	rjmp	.+246    	; 0xfcc <ADC1_Read+0x1a8>
	{
		_delay_ms(__us / 1000.0);
     ed6:	6d 89       	ldd	r22, Y+21	; 0x15
     ed8:	7e 89       	ldd	r23, Y+22	; 0x16
     eda:	8f 89       	ldd	r24, Y+23	; 0x17
     edc:	98 8d       	ldd	r25, Y+24	; 0x18
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	4a e7       	ldi	r20, 0x7A	; 122
     ee4:	54 e4       	ldi	r21, 0x44	; 68
     ee6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	8c 87       	std	Y+12, r24	; 0x0c
     ef0:	9d 87       	std	Y+13, r25	; 0x0d
     ef2:	ae 87       	std	Y+14, r26	; 0x0e
     ef4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef6:	6c 85       	ldd	r22, Y+12	; 0x0c
     ef8:	7d 85       	ldd	r23, Y+13	; 0x0d
     efa:	8e 85       	ldd	r24, Y+14	; 0x0e
     efc:	9f 85       	ldd	r25, Y+15	; 0x0f
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	4a e7       	ldi	r20, 0x7A	; 122
     f04:	53 e4       	ldi	r21, 0x43	; 67
     f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	88 87       	std	Y+8, r24	; 0x08
     f10:	99 87       	std	Y+9, r25	; 0x09
     f12:	aa 87       	std	Y+10, r26	; 0x0a
     f14:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     f16:	68 85       	ldd	r22, Y+8	; 0x08
     f18:	79 85       	ldd	r23, Y+9	; 0x09
     f1a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f1c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e8       	ldi	r20, 0x80	; 128
     f24:	5f e3       	ldi	r21, 0x3F	; 63
     f26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f2a:	88 23       	and	r24, r24
     f2c:	2c f4       	brge	.+10     	; 0xf38 <ADC1_Read+0x114>
		__ticks = 1;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	9f 83       	std	Y+7, r25	; 0x07
     f34:	8e 83       	std	Y+6, r24	; 0x06
     f36:	3f c0       	rjmp	.+126    	; 0xfb6 <ADC1_Read+0x192>
	else if (__tmp > 65535)
     f38:	68 85       	ldd	r22, Y+8	; 0x08
     f3a:	79 85       	ldd	r23, Y+9	; 0x09
     f3c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f3e:	9b 85       	ldd	r25, Y+11	; 0x0b
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	3f ef       	ldi	r19, 0xFF	; 255
     f44:	4f e7       	ldi	r20, 0x7F	; 127
     f46:	57 e4       	ldi	r21, 0x47	; 71
     f48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f4c:	18 16       	cp	r1, r24
     f4e:	4c f5       	brge	.+82     	; 0xfa2 <ADC1_Read+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f50:	6c 85       	ldd	r22, Y+12	; 0x0c
     f52:	7d 85       	ldd	r23, Y+13	; 0x0d
     f54:	8e 85       	ldd	r24, Y+14	; 0x0e
     f56:	9f 85       	ldd	r25, Y+15	; 0x0f
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	40 e2       	ldi	r20, 0x20	; 32
     f5e:	51 e4       	ldi	r21, 0x41	; 65
     f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	bc 01       	movw	r22, r24
     f6a:	cd 01       	movw	r24, r26
     f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	9f 83       	std	Y+7, r25	; 0x07
     f76:	8e 83       	std	Y+6, r24	; 0x06
     f78:	0f c0       	rjmp	.+30     	; 0xf98 <ADC1_Read+0x174>
     f7a:	89 e1       	ldi	r24, 0x19	; 25
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	9d 83       	std	Y+5, r25	; 0x05
     f80:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	9d 81       	ldd	r25, Y+5	; 0x05
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	f1 f7       	brne	.-4      	; 0xf86 <ADC1_Read+0x162>
     f8a:	9d 83       	std	Y+5, r25	; 0x05
     f8c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8e:	8e 81       	ldd	r24, Y+6	; 0x06
     f90:	9f 81       	ldd	r25, Y+7	; 0x07
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	9f 83       	std	Y+7, r25	; 0x07
     f96:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f98:	8e 81       	ldd	r24, Y+6	; 0x06
     f9a:	9f 81       	ldd	r25, Y+7	; 0x07
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	69 f7       	brne	.-38     	; 0xf7a <ADC1_Read+0x156>
     fa0:	24 c0       	rjmp	.+72     	; 0xfea <ADC1_Read+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa2:	68 85       	ldd	r22, Y+8	; 0x08
     fa4:	79 85       	ldd	r23, Y+9	; 0x09
     fa6:	8a 85       	ldd	r24, Y+10	; 0x0a
     fa8:	9b 85       	ldd	r25, Y+11	; 0x0b
     faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	9f 83       	std	Y+7, r25	; 0x07
     fb4:	8e 83       	std	Y+6, r24	; 0x06
     fb6:	8e 81       	ldd	r24, Y+6	; 0x06
     fb8:	9f 81       	ldd	r25, Y+7	; 0x07
     fba:	9b 83       	std	Y+3, r25	; 0x03
     fbc:	8a 83       	std	Y+2, r24	; 0x02
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	9b 81       	ldd	r25, Y+3	; 0x03
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	f1 f7       	brne	.-4      	; 0xfc2 <ADC1_Read+0x19e>
     fc6:	9b 83       	std	Y+3, r25	; 0x03
     fc8:	8a 83       	std	Y+2, r24	; 0x02
     fca:	0f c0       	rjmp	.+30     	; 0xfea <ADC1_Read+0x1c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fcc:	69 89       	ldd	r22, Y+17	; 0x11
     fce:	7a 89       	ldd	r23, Y+18	; 0x12
     fd0:	8b 89       	ldd	r24, Y+19	; 0x13
     fd2:	9c 89       	ldd	r25, Y+20	; 0x14
     fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	88 8b       	std	Y+16, r24	; 0x10
     fde:	88 89       	ldd	r24, Y+16	; 0x10
     fe0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	8a 95       	dec	r24
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <ADC1_Read+0x1c0>
     fe8:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
     fea:	e4 e2       	ldi	r30, 0x24	; 36
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	88 2f       	mov	r24, r24
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	9a 8f       	std	Y+26, r25	; 0x1a
     ff6:	89 8f       	std	Y+25, r24	; 0x19
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
     ff8:	e5 e2       	ldi	r30, 0x25	; 37
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	98 2f       	mov	r25, r24
    1004:	88 27       	eor	r24, r24
    1006:	9c 8f       	std	Y+28, r25	; 0x1c
    1008:	8b 8f       	std	Y+27, r24	; 0x1b
					Multiply with weight */
	Ain = Ain + AinLow;				
    100a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    100c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    100e:	89 8d       	ldd	r24, Y+25	; 0x19
    1010:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1012:	82 0f       	add	r24, r18
    1014:	93 1f       	adc	r25, r19
    1016:	9c 8f       	std	Y+28, r25	; 0x1c
    1018:	8b 8f       	std	Y+27, r24	; 0x1b
	return(Ain);			/* Return digital value*/
    101a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    101c:	9c 8d       	ldd	r25, Y+28	; 0x1c
}
    101e:	6d 96       	adiw	r28, 0x1d	; 29
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <Dio_SetPinDirection>:
#include "Dio_Int.h"
#include "Dio_Reg.h"
#include "Utilites.h"

void Dio_SetPinDirection(u8 GroupNo, u8 PinNo, u8 Direction)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	27 97       	sbiw	r28, 0x07	; 7
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	6a 83       	std	Y+2, r22	; 0x02
    1048:	4b 83       	std	Y+3, r20	; 0x03
	if((GroupNo<=GroupD) && (PinNo<=PIN7))
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	84 30       	cpi	r24, 0x04	; 4
    104e:	08 f0       	brcs	.+2      	; 0x1052 <Dio_SetPinDirection+0x22>
    1050:	ee c0       	rjmp	.+476    	; 0x122e <Dio_SetPinDirection+0x1fe>
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	88 30       	cpi	r24, 0x08	; 8
    1056:	08 f0       	brcs	.+2      	; 0x105a <Dio_SetPinDirection+0x2a>
    1058:	ea c0       	rjmp	.+468    	; 0x122e <Dio_SetPinDirection+0x1fe>
	{
		if(Direction==OUTPUT)
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	09 f0       	breq	.+2      	; 0x1062 <Dio_SetPinDirection+0x32>
    1060:	6f c0       	rjmp	.+222    	; 0x1140 <Dio_SetPinDirection+0x110>
		{
			switch(GroupNo)
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	3f 83       	std	Y+7, r19	; 0x07
    106a:	2e 83       	std	Y+6, r18	; 0x06
    106c:	8e 81       	ldd	r24, Y+6	; 0x06
    106e:	9f 81       	ldd	r25, Y+7	; 0x07
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	91 05       	cpc	r25, r1
    1074:	49 f1       	breq	.+82     	; 0x10c8 <Dio_SetPinDirection+0x98>
    1076:	2e 81       	ldd	r18, Y+6	; 0x06
    1078:	3f 81       	ldd	r19, Y+7	; 0x07
    107a:	22 30       	cpi	r18, 0x02	; 2
    107c:	31 05       	cpc	r19, r1
    107e:	2c f4       	brge	.+10     	; 0x108a <Dio_SetPinDirection+0x5a>
    1080:	8e 81       	ldd	r24, Y+6	; 0x06
    1082:	9f 81       	ldd	r25, Y+7	; 0x07
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	61 f0       	breq	.+24     	; 0x10a0 <Dio_SetPinDirection+0x70>
    1088:	d2 c0       	rjmp	.+420    	; 0x122e <Dio_SetPinDirection+0x1fe>
    108a:	2e 81       	ldd	r18, Y+6	; 0x06
    108c:	3f 81       	ldd	r19, Y+7	; 0x07
    108e:	22 30       	cpi	r18, 0x02	; 2
    1090:	31 05       	cpc	r19, r1
    1092:	71 f1       	breq	.+92     	; 0x10f0 <Dio_SetPinDirection+0xc0>
    1094:	8e 81       	ldd	r24, Y+6	; 0x06
    1096:	9f 81       	ldd	r25, Y+7	; 0x07
    1098:	83 30       	cpi	r24, 0x03	; 3
    109a:	91 05       	cpc	r25, r1
    109c:	e9 f1       	breq	.+122    	; 0x1118 <Dio_SetPinDirection+0xe8>
    109e:	c7 c0       	rjmp	.+398    	; 0x122e <Dio_SetPinDirection+0x1fe>
			{
			case GroupA: SET_BIT(DDRA, PinNo); break;
    10a0:	aa e3       	ldi	r26, 0x3A	; 58
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	ea e3       	ldi	r30, 0x3A	; 58
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <Dio_SetPinDirection+0x8e>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <Dio_SetPinDirection+0x8a>
    10c2:	84 2b       	or	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	b3 c0       	rjmp	.+358    	; 0x122e <Dio_SetPinDirection+0x1fe>
			case GroupB: SET_BIT(DDRB, PinNo); break;
    10c8:	a7 e3       	ldi	r26, 0x37	; 55
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e7 e3       	ldi	r30, 0x37	; 55
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <Dio_SetPinDirection+0xb6>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <Dio_SetPinDirection+0xb2>
    10ea:	84 2b       	or	r24, r20
    10ec:	8c 93       	st	X, r24
    10ee:	9f c0       	rjmp	.+318    	; 0x122e <Dio_SetPinDirection+0x1fe>
			case GroupC: SET_BIT(DDRC, PinNo); break;
    10f0:	a4 e3       	ldi	r26, 0x34	; 52
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e4 e3       	ldi	r30, 0x34	; 52
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 2e       	mov	r0, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <Dio_SetPinDirection+0xde>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <Dio_SetPinDirection+0xda>
    1112:	84 2b       	or	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	8b c0       	rjmp	.+278    	; 0x122e <Dio_SetPinDirection+0x1fe>
			case GroupD: SET_BIT(DDRD, PinNo); break;
    1118:	a1 e3       	ldi	r26, 0x31	; 49
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e1 e3       	ldi	r30, 0x31	; 49
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <Dio_SetPinDirection+0x106>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <Dio_SetPinDirection+0x102>
    113a:	84 2b       	or	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	77 c0       	rjmp	.+238    	; 0x122e <Dio_SetPinDirection+0x1fe>
			}
		}
		else if(Direction==INPUT)
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	88 23       	and	r24, r24
    1144:	09 f0       	breq	.+2      	; 0x1148 <Dio_SetPinDirection+0x118>
    1146:	73 c0       	rjmp	.+230    	; 0x122e <Dio_SetPinDirection+0x1fe>
		{
			switch(GroupNo)
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3d 83       	std	Y+5, r19	; 0x05
    1150:	2c 83       	std	Y+4, r18	; 0x04
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	91 05       	cpc	r25, r1
    115a:	59 f1       	breq	.+86     	; 0x11b2 <Dio_SetPinDirection+0x182>
    115c:	2c 81       	ldd	r18, Y+4	; 0x04
    115e:	3d 81       	ldd	r19, Y+5	; 0x05
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	2c f4       	brge	.+10     	; 0x1170 <Dio_SetPinDirection+0x140>
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f0       	breq	.+26     	; 0x1188 <Dio_SetPinDirection+0x158>
    116e:	5f c0       	rjmp	.+190    	; 0x122e <Dio_SetPinDirection+0x1fe>
    1170:	2c 81       	ldd	r18, Y+4	; 0x04
    1172:	3d 81       	ldd	r19, Y+5	; 0x05
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	89 f1       	breq	.+98     	; 0x11dc <Dio_SetPinDirection+0x1ac>
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	83 30       	cpi	r24, 0x03	; 3
    1180:	91 05       	cpc	r25, r1
    1182:	09 f4       	brne	.+2      	; 0x1186 <Dio_SetPinDirection+0x156>
    1184:	40 c0       	rjmp	.+128    	; 0x1206 <Dio_SetPinDirection+0x1d6>
    1186:	53 c0       	rjmp	.+166    	; 0x122e <Dio_SetPinDirection+0x1fe>
			{
			case GroupA: CLR_BIT(DDRA, PinNo); break;
    1188:	aa e3       	ldi	r26, 0x3A	; 58
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	ea e3       	ldi	r30, 0x3A	; 58
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <Dio_SetPinDirection+0x176>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <Dio_SetPinDirection+0x172>
    11aa:	80 95       	com	r24
    11ac:	84 23       	and	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	3e c0       	rjmp	.+124    	; 0x122e <Dio_SetPinDirection+0x1fe>
			case GroupB: CLR_BIT(DDRB, PinNo); break;
    11b2:	a7 e3       	ldi	r26, 0x37	; 55
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e7 e3       	ldi	r30, 0x37	; 55
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <Dio_SetPinDirection+0x1a0>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <Dio_SetPinDirection+0x19c>
    11d4:	80 95       	com	r24
    11d6:	84 23       	and	r24, r20
    11d8:	8c 93       	st	X, r24
    11da:	29 c0       	rjmp	.+82     	; 0x122e <Dio_SetPinDirection+0x1fe>
			case GroupC: CLR_BIT(DDRC, PinNo); break;
    11dc:	a4 e3       	ldi	r26, 0x34	; 52
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e4 e3       	ldi	r30, 0x34	; 52
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <Dio_SetPinDirection+0x1ca>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <Dio_SetPinDirection+0x1c6>
    11fe:	80 95       	com	r24
    1200:	84 23       	and	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	14 c0       	rjmp	.+40     	; 0x122e <Dio_SetPinDirection+0x1fe>
			case GroupD: CLR_BIT(DDRD, PinNo); break;
    1206:	a1 e3       	ldi	r26, 0x31	; 49
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e1 e3       	ldi	r30, 0x31	; 49
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <Dio_SetPinDirection+0x1f4>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <Dio_SetPinDirection+0x1f0>
    1228:	80 95       	com	r24
    122a:	84 23       	and	r24, r20
    122c:	8c 93       	st	X, r24
		else
		{
			//wrong Direction do noting
		}
	}
}
    122e:	27 96       	adiw	r28, 0x07	; 7
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <Dio_SetPinValue>:
void Dio_SetPinValue(u8 GroupNo, u8 PinNo, u8 Value)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	27 97       	sbiw	r28, 0x07	; 7
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	6a 83       	std	Y+2, r22	; 0x02
    1258:	4b 83       	std	Y+3, r20	; 0x03
	if((GroupNo<=GroupD) && (PinNo<=PIN7))
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	84 30       	cpi	r24, 0x04	; 4
    125e:	08 f0       	brcs	.+2      	; 0x1262 <Dio_SetPinValue+0x22>
    1260:	ee c0       	rjmp	.+476    	; 0x143e <Dio_SetPinValue+0x1fe>
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	88 30       	cpi	r24, 0x08	; 8
    1266:	08 f0       	brcs	.+2      	; 0x126a <Dio_SetPinValue+0x2a>
    1268:	ea c0       	rjmp	.+468    	; 0x143e <Dio_SetPinValue+0x1fe>
		{
			if(Value==LOW)
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	88 23       	and	r24, r24
    126e:	09 f0       	breq	.+2      	; 0x1272 <Dio_SetPinValue+0x32>
    1270:	74 c0       	rjmp	.+232    	; 0x135a <Dio_SetPinValue+0x11a>
			{
				switch(GroupNo)
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	3f 83       	std	Y+7, r19	; 0x07
    127a:	2e 83       	std	Y+6, r18	; 0x06
    127c:	8e 81       	ldd	r24, Y+6	; 0x06
    127e:	9f 81       	ldd	r25, Y+7	; 0x07
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	91 05       	cpc	r25, r1
    1284:	59 f1       	breq	.+86     	; 0x12dc <Dio_SetPinValue+0x9c>
    1286:	2e 81       	ldd	r18, Y+6	; 0x06
    1288:	3f 81       	ldd	r19, Y+7	; 0x07
    128a:	22 30       	cpi	r18, 0x02	; 2
    128c:	31 05       	cpc	r19, r1
    128e:	2c f4       	brge	.+10     	; 0x129a <Dio_SetPinValue+0x5a>
    1290:	8e 81       	ldd	r24, Y+6	; 0x06
    1292:	9f 81       	ldd	r25, Y+7	; 0x07
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	69 f0       	breq	.+26     	; 0x12b2 <Dio_SetPinValue+0x72>
    1298:	d2 c0       	rjmp	.+420    	; 0x143e <Dio_SetPinValue+0x1fe>
    129a:	2e 81       	ldd	r18, Y+6	; 0x06
    129c:	3f 81       	ldd	r19, Y+7	; 0x07
    129e:	22 30       	cpi	r18, 0x02	; 2
    12a0:	31 05       	cpc	r19, r1
    12a2:	89 f1       	breq	.+98     	; 0x1306 <Dio_SetPinValue+0xc6>
    12a4:	8e 81       	ldd	r24, Y+6	; 0x06
    12a6:	9f 81       	ldd	r25, Y+7	; 0x07
    12a8:	83 30       	cpi	r24, 0x03	; 3
    12aa:	91 05       	cpc	r25, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <Dio_SetPinValue+0x70>
    12ae:	40 c0       	rjmp	.+128    	; 0x1330 <Dio_SetPinValue+0xf0>
    12b0:	c6 c0       	rjmp	.+396    	; 0x143e <Dio_SetPinValue+0x1fe>
				{
				case GroupA: CLR_BIT(PORTA, PinNo); break;
    12b2:	ab e3       	ldi	r26, 0x3B	; 59
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	eb e3       	ldi	r30, 0x3B	; 59
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	48 2f       	mov	r20, r24
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 2e       	mov	r0, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <Dio_SetPinValue+0x90>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 94       	dec	r0
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <Dio_SetPinValue+0x8c>
    12d4:	80 95       	com	r24
    12d6:	84 23       	and	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	b1 c0       	rjmp	.+354    	; 0x143e <Dio_SetPinValue+0x1fe>
				case GroupB: CLR_BIT(PORTB, PinNo); break;
    12dc:	a8 e3       	ldi	r26, 0x38	; 56
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e8 e3       	ldi	r30, 0x38	; 56
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <Dio_SetPinValue+0xba>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <Dio_SetPinValue+0xb6>
    12fe:	80 95       	com	r24
    1300:	84 23       	and	r24, r20
    1302:	8c 93       	st	X, r24
    1304:	9c c0       	rjmp	.+312    	; 0x143e <Dio_SetPinValue+0x1fe>
				case GroupC: CLR_BIT(PORTC, PinNo); break;
    1306:	a5 e3       	ldi	r26, 0x35	; 53
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e5 e3       	ldi	r30, 0x35	; 53
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	48 2f       	mov	r20, r24
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 2e       	mov	r0, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <Dio_SetPinValue+0xe4>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	0a 94       	dec	r0
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <Dio_SetPinValue+0xe0>
    1328:	80 95       	com	r24
    132a:	84 23       	and	r24, r20
    132c:	8c 93       	st	X, r24
    132e:	87 c0       	rjmp	.+270    	; 0x143e <Dio_SetPinValue+0x1fe>
				case GroupD: CLR_BIT(PORTD, PinNo); break;
    1330:	a2 e3       	ldi	r26, 0x32	; 50
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e2 e3       	ldi	r30, 0x32	; 50
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <Dio_SetPinValue+0x10e>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <Dio_SetPinValue+0x10a>
    1352:	80 95       	com	r24
    1354:	84 23       	and	r24, r20
    1356:	8c 93       	st	X, r24
    1358:	72 c0       	rjmp	.+228    	; 0x143e <Dio_SetPinValue+0x1fe>
				}
			}
			else if(Value==HIGH)
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	09 f0       	breq	.+2      	; 0x1362 <Dio_SetPinValue+0x122>
    1360:	6e c0       	rjmp	.+220    	; 0x143e <Dio_SetPinValue+0x1fe>
			{
				switch(GroupNo)
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	3d 83       	std	Y+5, r19	; 0x05
    136a:	2c 83       	std	Y+4, r18	; 0x04
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	9d 81       	ldd	r25, Y+5	; 0x05
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	91 05       	cpc	r25, r1
    1374:	49 f1       	breq	.+82     	; 0x13c8 <Dio_SetPinValue+0x188>
    1376:	2c 81       	ldd	r18, Y+4	; 0x04
    1378:	3d 81       	ldd	r19, Y+5	; 0x05
    137a:	22 30       	cpi	r18, 0x02	; 2
    137c:	31 05       	cpc	r19, r1
    137e:	2c f4       	brge	.+10     	; 0x138a <Dio_SetPinValue+0x14a>
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	9d 81       	ldd	r25, Y+5	; 0x05
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	61 f0       	breq	.+24     	; 0x13a0 <Dio_SetPinValue+0x160>
    1388:	5a c0       	rjmp	.+180    	; 0x143e <Dio_SetPinValue+0x1fe>
    138a:	2c 81       	ldd	r18, Y+4	; 0x04
    138c:	3d 81       	ldd	r19, Y+5	; 0x05
    138e:	22 30       	cpi	r18, 0x02	; 2
    1390:	31 05       	cpc	r19, r1
    1392:	71 f1       	breq	.+92     	; 0x13f0 <Dio_SetPinValue+0x1b0>
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	9d 81       	ldd	r25, Y+5	; 0x05
    1398:	83 30       	cpi	r24, 0x03	; 3
    139a:	91 05       	cpc	r25, r1
    139c:	e9 f1       	breq	.+122    	; 0x1418 <Dio_SetPinValue+0x1d8>
    139e:	4f c0       	rjmp	.+158    	; 0x143e <Dio_SetPinValue+0x1fe>
				{
				case GroupA: SET_BIT(PORTA, PinNo); break;
    13a0:	ab e3       	ldi	r26, 0x3B	; 59
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	eb e3       	ldi	r30, 0x3B	; 59
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	48 2f       	mov	r20, r24
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 2e       	mov	r0, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <Dio_SetPinValue+0x17e>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <Dio_SetPinValue+0x17a>
    13c2:	84 2b       	or	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	3b c0       	rjmp	.+118    	; 0x143e <Dio_SetPinValue+0x1fe>
				case GroupB: SET_BIT(PORTB, PinNo); break;
    13c8:	a8 e3       	ldi	r26, 0x38	; 56
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e8 e3       	ldi	r30, 0x38	; 56
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	48 2f       	mov	r20, r24
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	02 2e       	mov	r0, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <Dio_SetPinValue+0x1a6>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	0a 94       	dec	r0
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <Dio_SetPinValue+0x1a2>
    13ea:	84 2b       	or	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	27 c0       	rjmp	.+78     	; 0x143e <Dio_SetPinValue+0x1fe>
				case GroupC: SET_BIT(PORTC, PinNo); break;
    13f0:	a5 e3       	ldi	r26, 0x35	; 53
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e5 e3       	ldi	r30, 0x35	; 53
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <Dio_SetPinValue+0x1ce>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <Dio_SetPinValue+0x1ca>
    1412:	84 2b       	or	r24, r20
    1414:	8c 93       	st	X, r24
    1416:	13 c0       	rjmp	.+38     	; 0x143e <Dio_SetPinValue+0x1fe>
				case GroupD: SET_BIT(PORTD, PinNo); break;
    1418:	a2 e3       	ldi	r26, 0x32	; 50
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e2 e3       	ldi	r30, 0x32	; 50
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <Dio_SetPinValue+0x1f6>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <Dio_SetPinValue+0x1f2>
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
			else
			{
				//wrong Direction do noting
			}
		}
}
    143e:	27 96       	adiw	r28, 0x07	; 7
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <Dio_GetPinValue>:
u8 Dio_GetPinValue(u8 GroupNo, u8 PinNo)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	00 d0       	rcall	.+0      	; 0x1456 <Dio_GetPinValue+0x6>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <Dio_GetPinValue+0x8>
    1458:	0f 92       	push	r0
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	8a 83       	std	Y+2, r24	; 0x02
    1460:	6b 83       	std	Y+3, r22	; 0x03
	u8 Ret_PinValue=0;
    1462:	19 82       	std	Y+1, r1	; 0x01

	if((GroupNo<=GroupD) && (PinNo<=PIN7))
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	84 30       	cpi	r24, 0x04	; 4
    1468:	08 f0       	brcs	.+2      	; 0x146c <Dio_GetPinValue+0x1c>
    146a:	6c c0       	rjmp	.+216    	; 0x1544 <Dio_GetPinValue+0xf4>
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	88 30       	cpi	r24, 0x08	; 8
    1470:	08 f0       	brcs	.+2      	; 0x1474 <Dio_GetPinValue+0x24>
    1472:	68 c0       	rjmp	.+208    	; 0x1544 <Dio_GetPinValue+0xf4>
	{
		switch(GroupNo)
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	3d 83       	std	Y+5, r19	; 0x05
    147c:	2c 83       	std	Y+4, r18	; 0x04
    147e:	4c 81       	ldd	r20, Y+4	; 0x04
    1480:	5d 81       	ldd	r21, Y+5	; 0x05
    1482:	41 30       	cpi	r20, 0x01	; 1
    1484:	51 05       	cpc	r21, r1
    1486:	41 f1       	breq	.+80     	; 0x14d8 <Dio_GetPinValue+0x88>
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	9d 81       	ldd	r25, Y+5	; 0x05
    148c:	82 30       	cpi	r24, 0x02	; 2
    148e:	91 05       	cpc	r25, r1
    1490:	34 f4       	brge	.+12     	; 0x149e <Dio_GetPinValue+0x4e>
    1492:	2c 81       	ldd	r18, Y+4	; 0x04
    1494:	3d 81       	ldd	r19, Y+5	; 0x05
    1496:	21 15       	cp	r18, r1
    1498:	31 05       	cpc	r19, r1
    149a:	61 f0       	breq	.+24     	; 0x14b4 <Dio_GetPinValue+0x64>
    149c:	55 c0       	rjmp	.+170    	; 0x1548 <Dio_GetPinValue+0xf8>
    149e:	4c 81       	ldd	r20, Y+4	; 0x04
    14a0:	5d 81       	ldd	r21, Y+5	; 0x05
    14a2:	42 30       	cpi	r20, 0x02	; 2
    14a4:	51 05       	cpc	r21, r1
    14a6:	51 f1       	breq	.+84     	; 0x14fc <Dio_GetPinValue+0xac>
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	9d 81       	ldd	r25, Y+5	; 0x05
    14ac:	83 30       	cpi	r24, 0x03	; 3
    14ae:	91 05       	cpc	r25, r1
    14b0:	b9 f1       	breq	.+110    	; 0x1520 <Dio_GetPinValue+0xd0>
    14b2:	4a c0       	rjmp	.+148    	; 0x1548 <Dio_GetPinValue+0xf8>
		{
		case GroupA: Ret_PinValue=GET_BIT(PINA, PinNo); break;
    14b4:	e9 e3       	ldi	r30, 0x39	; 57
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	a9 01       	movw	r20, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <Dio_GetPinValue+0x7c>
    14c8:	55 95       	asr	r21
    14ca:	47 95       	ror	r20
    14cc:	8a 95       	dec	r24
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <Dio_GetPinValue+0x78>
    14d0:	ca 01       	movw	r24, r20
    14d2:	81 70       	andi	r24, 0x01	; 1
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	38 c0       	rjmp	.+112    	; 0x1548 <Dio_GetPinValue+0xf8>
		case GroupB: Ret_PinValue=GET_BIT(PINB, PinNo); break;
    14d8:	e6 e3       	ldi	r30, 0x36	; 54
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	88 2f       	mov	r24, r24
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	a9 01       	movw	r20, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <Dio_GetPinValue+0xa0>
    14ec:	55 95       	asr	r21
    14ee:	47 95       	ror	r20
    14f0:	8a 95       	dec	r24
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <Dio_GetPinValue+0x9c>
    14f4:	ca 01       	movw	r24, r20
    14f6:	81 70       	andi	r24, 0x01	; 1
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	26 c0       	rjmp	.+76     	; 0x1548 <Dio_GetPinValue+0xf8>
		case GroupC: Ret_PinValue=GET_BIT(PINC, PinNo); break;
    14fc:	e3 e3       	ldi	r30, 0x33	; 51
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a9 01       	movw	r20, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <Dio_GetPinValue+0xc4>
    1510:	55 95       	asr	r21
    1512:	47 95       	ror	r20
    1514:	8a 95       	dec	r24
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <Dio_GetPinValue+0xc0>
    1518:	ca 01       	movw	r24, r20
    151a:	81 70       	andi	r24, 0x01	; 1
    151c:	89 83       	std	Y+1, r24	; 0x01
    151e:	14 c0       	rjmp	.+40     	; 0x1548 <Dio_GetPinValue+0xf8>
		case GroupD: Ret_PinValue=GET_BIT(PIND, PinNo); break;
    1520:	e0 e3       	ldi	r30, 0x30	; 48
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a9 01       	movw	r20, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <Dio_GetPinValue+0xe8>
    1534:	55 95       	asr	r21
    1536:	47 95       	ror	r20
    1538:	8a 95       	dec	r24
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <Dio_GetPinValue+0xe4>
    153c:	ca 01       	movw	r24, r20
    153e:	81 70       	andi	r24, 0x01	; 1
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <Dio_GetPinValue+0xf8>
		}
	}
	else
		Ret_PinValue=0xFF;
    1544:	8f ef       	ldi	r24, 0xFF	; 255
    1546:	89 83       	std	Y+1, r24	; 0x01

return Ret_PinValue;
    1548:	89 81       	ldd	r24, Y+1	; 0x01
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <EEPROM_INIT>:
#include"I2C_Int.h"
#include"STD_type.h"
#include"EEPROM_INT.h"
// WRITE IN EXTERNAL EEPROM
void EEPROM_INIT (void)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
	 I2c_Init_Master();
    1562:	0e 94 44 0b 	call	0x1688	; 0x1688 <I2c_Init_Master>

}
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <EEPROM_Write_data>:
void EEPROM_Write_data(u8 address , u8 data)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	00 d0       	rcall	.+0      	; 0x1572 <EEPROM_Write_data+0x6>
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	6a 83       	std	Y+2, r22	; 0x02
	 I2c_Start();
    157a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <I2c_Start>
	  I2c_Send_slave_address_with_write_req(0b10100000);
    157e:	80 ea       	ldi	r24, 0xA0	; 160
    1580:	0e 94 9c 0b 	call	0x1738	; 0x1738 <I2c_Send_slave_address_with_write_req>
	  I2c_Write_byte(address);
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <I2c_Write_byte>
	  I2c_Write_byte(data);
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <I2c_Write_byte>
	  I2c_Stop();
    1590:	0e 94 23 0c 	call	0x1846	; 0x1846 <I2c_Stop>
}
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <EEPROM_readData>:
u8 EEPROM_readData (u8 address)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <EEPROM_readData+0x6>
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	8a 83       	std	Y+2, r24	; 0x02
	 I2c_Start();
    15aa:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <I2c_Start>
	 I2c_Send_slave_address_with_write_req(0b10100000);
    15ae:	80 ea       	ldi	r24, 0xA0	; 160
    15b0:	0e 94 9c 0b 	call	0x1738	; 0x1738 <I2c_Send_slave_address_with_write_req>
	  I2c_Write_byte(address); // slave knows first byte sent for address inside block
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <I2c_Write_byte>

	  // instead of repeated start
	   I2c_Stop();
    15ba:	0e 94 23 0c 	call	0x1846	; 0x1846 <I2c_Stop>
	   I2c_Start();
    15be:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <I2c_Start>
	    I2c_Send_slave_address_with_read_req(0b10100000);
    15c2:	80 ea       	ldi	r24, 0xA0	; 160
    15c4:	0e 94 bd 0b 	call	0x177a	; 0x177a <I2c_Send_slave_address_with_read_req>
	      u8 z =I2c_Read_byte();
    15c8:	0e 94 06 0c 	call	0x180c	; 0x180c <I2c_Read_byte>
    15cc:	89 83       	std	Y+1, r24	; 0x01
	      I2c_Stop();
    15ce:	0e 94 23 0c 	call	0x1846	; 0x1846 <I2c_Stop>
	      return z ;
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <EEPROM_Write_data_all>:
// Write in interNal EEPROM
void EEPROM_Write_data_all(u8 address , u8 data)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <EEPROM_Write_data_all+0x6>
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	6a 83       	std	Y+2, r22	; 0x02
	 I2c_Start();
    15ec:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <I2c_Start>
	  I2c_Send_slave_address_with_write_req(0b10100000);
    15f0:	80 ea       	ldi	r24, 0xA0	; 160
    15f2:	0e 94 9c 0b 	call	0x1738	; 0x1738 <I2c_Send_slave_address_with_write_req>
	  EEAR = 0 ; // cause first address isn t defined
    15f6:	ee e3       	ldi	r30, 0x3E	; 62
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	11 82       	std	Z+1, r1	; 0x01
    15fc:	10 82       	st	Z, r1
	  EEAR = address;
    15fe:	ee e3       	ldi	r30, 0x3E	; 62
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	91 83       	std	Z+1, r25	; 0x01
    160a:	80 83       	st	Z, r24
	  I2c_Write_byte(EEAR);
    160c:	ee e3       	ldi	r30, 0x3E	; 62
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	91 81       	ldd	r25, Z+1	; 0x01
    1614:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <I2c_Write_byte>
	  I2c_Write_byte(data);
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <I2c_Write_byte>
	  I2c_Stop();
    161e:	0e 94 23 0c 	call	0x1846	; 0x1846 <I2c_Stop>
}
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <EEPROM_readData_all>:
u8 EEPROM_readData_all (u8 address)
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	00 d0       	rcall	.+0      	; 0x1632 <EEPROM_readData_all+0x6>
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	8a 83       	std	Y+2, r24	; 0x02
    // write first cause save last address wanted to read from
    // for data more than one byte
	 I2c_Start();
    1638:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <I2c_Start>
	 I2c_Send_slave_address_with_write_req(0b10100000);
    163c:	80 ea       	ldi	r24, 0xA0	; 160
    163e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <I2c_Send_slave_address_with_write_req>
	 EEAR = 0 ;
    1642:	ee e3       	ldi	r30, 0x3E	; 62
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	11 82       	std	Z+1, r1	; 0x01
    1648:	10 82       	st	Z, r1
	 EEAR = address;
    164a:	ee e3       	ldi	r30, 0x3E	; 62
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	88 2f       	mov	r24, r24
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	91 83       	std	Z+1, r25	; 0x01
    1656:	80 83       	st	Z, r24
	  I2c_Write_byte(EEAR); // slave knows first byte sent for address inside block
    1658:	ee e3       	ldi	r30, 0x3E	; 62
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	91 81       	ldd	r25, Z+1	; 0x01
    1660:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <I2c_Write_byte>

	  // instead of repeated start
	   I2c_Stop();
    1664:	0e 94 23 0c 	call	0x1846	; 0x1846 <I2c_Stop>
	   I2c_Start();
    1668:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <I2c_Start>
	    I2c_Send_slave_address_with_read_req(0b10100000);
    166c:	80 ea       	ldi	r24, 0xA0	; 160
    166e:	0e 94 bd 0b 	call	0x177a	; 0x177a <I2c_Send_slave_address_with_read_req>
	      u8 z =I2c_Read_byte();
    1672:	0e 94 06 0c 	call	0x180c	; 0x180c <I2c_Read_byte>
    1676:	89 83       	std	Y+1, r24	; 0x01
	      I2c_Stop();
    1678:	0e 94 23 0c 	call	0x1846	; 0x1846 <I2c_Stop>
	      return z ;
    167c:	89 81       	ldd	r24, Y+1	; 0x01
}
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <I2c_Init_Master>:
#include "STD_type.h"
#include "Utilites.h"
#include "I2C_Int.h"

void I2c_Init_Master(void)
{
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
	TWBR=0x03;        //SCL_frequency = 400000 HZ, F_CPU = 16M   SCL freq= F_CPU/(16+2(TWBR).4^TWPS)
    1690:	e0 e2       	ldi	r30, 0x20	; 32
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	83 e0       	ldi	r24, 0x03	; 3
    1696:	80 83       	st	Z, r24
	//CLR_BIT(TWSR, 0); //setting prescaller to 1
	//CLR_BIT(TWSR, 1); //setting prescaller to 1
	SET_BIT(TWCR, TWEN); //Enable I2C
    1698:	a6 e5       	ldi	r26, 0x56	; 86
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e6 e5       	ldi	r30, 0x56	; 86
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	84 60       	ori	r24, 0x04	; 4
    16a4:	8c 93       	st	X, r24
}
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <I2c_Init_Slave>:
void I2c_Init_Slave(void)
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
	TWAR=0x06;            //provide slave address, my address will be 0x06
    16b4:	e2 e2       	ldi	r30, 0x22	; 34
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	86 e0       	ldi	r24, 0x06	; 6
    16ba:	80 83       	st	Z, r24
	SET_BIT(TWCR, TWEN);  //Enable I2C
    16bc:	a6 e5       	ldi	r26, 0x56	; 86
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e6 e5       	ldi	r30, 0x56	; 86
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	84 60       	ori	r24, 0x04	; 4
    16c8:	8c 93       	st	X, r24
}
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <I2c_Start>:
void I2c_Start(void)
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<< TWINT) | (1<< TWSTA) | (1<< TWEN);//Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
    16d8:	e6 e5       	ldi	r30, 0x56	; 86
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	84 ea       	ldi	r24, 0xA4	; 164
    16de:	80 83       	st	Z, r24
	while(GET_BIT(TWCR, TWINT)==0);	// Wait till start condition is transmitted
    16e0:	e6 e5       	ldi	r30, 0x56	; 86
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	88 23       	and	r24, r24
    16e8:	dc f7       	brge	.-10     	; 0x16e0 <I2c_Start+0x10>
	while ((TWSR & 0xF8)!=START_SENT_OK);//Check value of TWI Status Register equal to start
    16ea:	e1 e2       	ldi	r30, 0x21	; 33
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	88 7f       	andi	r24, 0xF8	; 248
    16f6:	90 70       	andi	r25, 0x00	; 0
    16f8:	88 30       	cpi	r24, 0x08	; 8
    16fa:	91 05       	cpc	r25, r1
    16fc:	b1 f7       	brne	.-20     	; 0x16ea <I2c_Start+0x1a>
}
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <I2c_Repeated_start>:
void I2c_Repeated_start(void)
{
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<< TWINT) | (1<< TWSTA) | (1<< TWEN);//Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
    170c:	e6 e5       	ldi	r30, 0x56	; 86
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	84 ea       	ldi	r24, 0xA4	; 164
    1712:	80 83       	st	Z, r24
	while(GET_BIT(TWCR, TWINT)==0);	// Wait till start condition is transmitted
    1714:	e6 e5       	ldi	r30, 0x56	; 86
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	88 23       	and	r24, r24
    171c:	dc f7       	brge	.-10     	; 0x1714 <I2c_Repeated_start+0x10>
	while ((TWSR & 0xF8)!=REP_START_SENT_OK);//Check value of TWI Status Register equal to start
    171e:	e1 e2       	ldi	r30, 0x21	; 33
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	88 2f       	mov	r24, r24
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	88 7f       	andi	r24, 0xF8	; 248
    172a:	90 70       	andi	r25, 0x00	; 0
    172c:	80 31       	cpi	r24, 0x10	; 16
    172e:	91 05       	cpc	r25, r1
    1730:	b1 f7       	brne	.-20     	; 0x171e <I2c_Repeated_start+0x1a>
}
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <I2c_Send_slave_address_with_write_req>:
void I2c_Send_slave_address_with_write_req(u8 slave_address)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	0f 92       	push	r0
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	89 83       	std	Y+1, r24	; 0x01
	TWDR = slave_address;                    //Address and write instruction
    1744:	e3 e2       	ldi	r30, 0x23	; 35
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);//Clear TWI interrupt flag, Enable TWI
    174c:	e6 e5       	ldi	r30, 0x56	; 86
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	84 e8       	ldi	r24, 0x84	; 132
    1752:	80 83       	st	Z, r24
	while(GET_BIT(TWCR, TWINT)==0);	//Wait till complete TWDR byte transmitted
    1754:	e6 e5       	ldi	r30, 0x56	; 86
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	88 23       	and	r24, r24
    175c:	dc f7       	brge	.-10     	; 0x1754 <I2c_Send_slave_address_with_write_req+0x1c>
	while((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK);  // Check for the acknowledgment
    175e:	e1 e2       	ldi	r30, 0x21	; 33
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	88 7f       	andi	r24, 0xF8	; 248
    176a:	90 70       	andi	r25, 0x00	; 0
    176c:	88 31       	cpi	r24, 0x18	; 24
    176e:	91 05       	cpc	r25, r1
    1770:	b1 f7       	brne	.-20     	; 0x175e <I2c_Send_slave_address_with_write_req+0x26>
}
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <I2c_Send_slave_address_with_read_req>:
void I2c_Send_slave_address_with_read_req(u8 slave_address)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	0f 92       	push	r0
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	89 83       	std	Y+1, r24	; 0x01
	TWDR = slave_address;       // Address
    1786:	e3 e2       	ldi	r30, 0x23	; 35
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	80 83       	st	Z, r24
	SET_BIT(TWDR, 0);				// read instruction
    178e:	a3 e2       	ldi	r26, 0x23	; 35
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e3 e2       	ldi	r30, 0x23	; 35
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	81 60       	ori	r24, 0x01	; 1
    179a:	8c 93       	st	X, r24
	TWCR = (1<<TWINT) | (1<<TWEN);//Clear TWI interrupt flag, Enable TWI
    179c:	e6 e5       	ldi	r30, 0x56	; 86
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	84 e8       	ldi	r24, 0x84	; 132
    17a2:	80 83       	st	Z, r24
	while(GET_BIT(TWCR, TWINT)==0);	//Wait till complete TWDR byte transmitted
    17a4:	e6 e5       	ldi	r30, 0x56	; 86
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	88 23       	and	r24, r24
    17ac:	dc f7       	brge	.-10     	; 0x17a4 <I2c_Send_slave_address_with_read_req+0x2a>
	while((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK);   // Check for the acknowledgment
    17ae:	e1 e2       	ldi	r30, 0x21	; 33
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	88 7f       	andi	r24, 0xF8	; 248
    17ba:	90 70       	andi	r25, 0x00	; 0
    17bc:	80 34       	cpi	r24, 0x40	; 64
    17be:	91 05       	cpc	r25, r1
    17c0:	b1 f7       	brne	.-20     	; 0x17ae <I2c_Send_slave_address_with_read_req+0x34>
}
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <I2c_Write_byte>:
void I2c_Write_byte(u8 byte)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	0f 92       	push	r0
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	89 83       	std	Y+1, r24	; 0x01
	TWDR = byte;                            // put data in TWDR
    17d6:	e3 e2       	ldi	r30, 0x23	; 35
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);//Clear TWI interrupt flag, Enable TWI
    17de:	e6 e5       	ldi	r30, 0x56	; 86
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	84 e8       	ldi	r24, 0x84	; 132
    17e4:	80 83       	st	Z, r24
	while(GET_BIT(TWCR, TWINT)==0);	//Wait till complete TWDR byte transmitted
    17e6:	e6 e5       	ldi	r30, 0x56	; 86
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	88 23       	and	r24, r24
    17ee:	dc f7       	brge	.-10     	; 0x17e6 <I2c_Write_byte+0x1c>
	while((TWSR & 0xF8) != WR_BYTE_ACK);    // Check for the acknowledgment
    17f0:	e1 e2       	ldi	r30, 0x21	; 33
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	88 2f       	mov	r24, r24
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	88 7f       	andi	r24, 0xF8	; 248
    17fc:	90 70       	andi	r25, 0x00	; 0
    17fe:	88 32       	cpi	r24, 0x28	; 40
    1800:	91 05       	cpc	r25, r1
    1802:	b1 f7       	brne	.-20     	; 0x17f0 <I2c_Write_byte+0x26>
}
    1804:	0f 90       	pop	r0
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <I2c_Read_byte>:
u8 I2c_Read_byte(void)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);//Clear TWI interrupt flag, Enable TWI
    1814:	e6 e5       	ldi	r30, 0x56	; 86
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	84 e8       	ldi	r24, 0x84	; 132
    181a:	80 83       	st	Z, r24
	while(GET_BIT(TWCR, TWINT)==0);	//Wait till complete TWDR byte transmitted
    181c:	e6 e5       	ldi	r30, 0x56	; 86
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	88 23       	and	r24, r24
    1824:	dc f7       	brge	.-10     	; 0x181c <I2c_Read_byte+0x10>
	while((TWSR & 0xF8) != RD_BYTE_WITH_NACK);   // Check for the acknowledgment
    1826:	e1 e2       	ldi	r30, 0x21	; 33
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	88 7f       	andi	r24, 0xF8	; 248
    1832:	90 70       	andi	r25, 0x00	; 0
    1834:	88 35       	cpi	r24, 0x58	; 88
    1836:	91 05       	cpc	r25, r1
    1838:	b1 f7       	brne	.-20     	; 0x1826 <I2c_Read_byte+0x1a>
	return TWDR;
    183a:	e3 e2       	ldi	r30, 0x23	; 35
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
}
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <I2c_Stop>:
void I2c_Stop(void)
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);//Clear TWI interrupt flag,Put stop condition, Enable TWI
    184e:	e6 e5       	ldi	r30, 0x56	; 86
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	84 e9       	ldi	r24, 0x94	; 148
    1854:	80 83       	st	Z, r24
}
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <button_init>:
#include "Dio_Reg.h"
#include "STD_type.h"
#include "segment.h"
#include "avr/delay.h"
void button_init(void)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(DDRC,2);
    1864:	a4 e3       	ldi	r26, 0x34	; 52
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e4 e3       	ldi	r30, 0x34	; 52
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	84 60       	ori	r24, 0x04	; 4
    1870:	8c 93       	st	X, r24
    SET_BIT(DDRD,3);
    1872:	a1 e3       	ldi	r26, 0x31	; 49
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e1 e3       	ldi	r30, 0x31	; 49
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	88 60       	ori	r24, 0x08	; 8
    187e:	8c 93       	st	X, r24
}
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <button_1>:
u8  button_1 (u8 data)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	2f 97       	sbiw	r28, 0x0f	; 15
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	8f 87       	std	Y+15, r24	; 0x0f
  //  u8 data ;

    if (GET_BIT(PIND,2)==1){
    189c:	e0 e3       	ldi	r30, 0x30	; 48
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	86 95       	lsr	r24
    18a4:	86 95       	lsr	r24
    18a6:	88 2f       	mov	r24, r24
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	81 70       	andi	r24, 0x01	; 1
    18ac:	90 70       	andi	r25, 0x00	; 0
    18ae:	88 23       	and	r24, r24
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <button_1+0x2e>
    18b2:	80 c0       	rjmp	.+256    	; 0x19b4 <button_1+0x12e>
     while (GET_BIT(PIND,2)==1);
    18b4:	e0 e3       	ldi	r30, 0x30	; 48
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	86 95       	lsr	r24
    18bc:	86 95       	lsr	r24
    18be:	88 2f       	mov	r24, r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	81 70       	andi	r24, 0x01	; 1
    18c4:	90 70       	andi	r25, 0x00	; 0
    18c6:	88 23       	and	r24, r24
    18c8:	a9 f7       	brne	.-22     	; 0x18b4 <button_1+0x2e>
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a0 e2       	ldi	r26, 0x20	; 32
    18d0:	b1 e4       	ldi	r27, 0x41	; 65
    18d2:	8b 87       	std	Y+11, r24	; 0x0b
    18d4:	9c 87       	std	Y+12, r25	; 0x0c
    18d6:	ad 87       	std	Y+13, r26	; 0x0d
    18d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18da:	6b 85       	ldd	r22, Y+11	; 0x0b
    18dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18de:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	4a e7       	ldi	r20, 0x7A	; 122
    18e8:	55 e4       	ldi	r21, 0x45	; 69
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	8f 83       	std	Y+7, r24	; 0x07
    18f4:	98 87       	std	Y+8, r25	; 0x08
    18f6:	a9 87       	std	Y+9, r26	; 0x09
    18f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18fa:	6f 81       	ldd	r22, Y+7	; 0x07
    18fc:	78 85       	ldd	r23, Y+8	; 0x08
    18fe:	89 85       	ldd	r24, Y+9	; 0x09
    1900:	9a 85       	ldd	r25, Y+10	; 0x0a
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e8       	ldi	r20, 0x80	; 128
    1908:	5f e3       	ldi	r21, 0x3F	; 63
    190a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    190e:	88 23       	and	r24, r24
    1910:	2c f4       	brge	.+10     	; 0x191c <button_1+0x96>
		__ticks = 1;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	9e 83       	std	Y+6, r25	; 0x06
    1918:	8d 83       	std	Y+5, r24	; 0x05
    191a:	3f c0       	rjmp	.+126    	; 0x199a <button_1+0x114>
	else if (__tmp > 65535)
    191c:	6f 81       	ldd	r22, Y+7	; 0x07
    191e:	78 85       	ldd	r23, Y+8	; 0x08
    1920:	89 85       	ldd	r24, Y+9	; 0x09
    1922:	9a 85       	ldd	r25, Y+10	; 0x0a
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	3f ef       	ldi	r19, 0xFF	; 255
    1928:	4f e7       	ldi	r20, 0x7F	; 127
    192a:	57 e4       	ldi	r21, 0x47	; 71
    192c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1930:	18 16       	cp	r1, r24
    1932:	4c f5       	brge	.+82     	; 0x1986 <button_1+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1934:	6b 85       	ldd	r22, Y+11	; 0x0b
    1936:	7c 85       	ldd	r23, Y+12	; 0x0c
    1938:	8d 85       	ldd	r24, Y+13	; 0x0d
    193a:	9e 85       	ldd	r25, Y+14	; 0x0e
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e2       	ldi	r20, 0x20	; 32
    1942:	51 e4       	ldi	r21, 0x41	; 65
    1944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9e 83       	std	Y+6, r25	; 0x06
    195a:	8d 83       	std	Y+5, r24	; 0x05
    195c:	0f c0       	rjmp	.+30     	; 0x197c <button_1+0xf6>
    195e:	80 e9       	ldi	r24, 0x90	; 144
    1960:	91 e0       	ldi	r25, 0x01	; 1
    1962:	9c 83       	std	Y+4, r25	; 0x04
    1964:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <button_1+0xe4>
    196e:	9c 83       	std	Y+4, r25	; 0x04
    1970:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1972:	8d 81       	ldd	r24, Y+5	; 0x05
    1974:	9e 81       	ldd	r25, Y+6	; 0x06
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	9e 83       	std	Y+6, r25	; 0x06
    197a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197c:	8d 81       	ldd	r24, Y+5	; 0x05
    197e:	9e 81       	ldd	r25, Y+6	; 0x06
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	69 f7       	brne	.-38     	; 0x195e <button_1+0xd8>
    1984:	14 c0       	rjmp	.+40     	; 0x19ae <button_1+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1986:	6f 81       	ldd	r22, Y+7	; 0x07
    1988:	78 85       	ldd	r23, Y+8	; 0x08
    198a:	89 85       	ldd	r24, Y+9	; 0x09
    198c:	9a 85       	ldd	r25, Y+10	; 0x0a
    198e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	8d 81       	ldd	r24, Y+5	; 0x05
    199c:	9e 81       	ldd	r25, Y+6	; 0x06
    199e:	9a 83       	std	Y+2, r25	; 0x02
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	9a 81       	ldd	r25, Y+2	; 0x02
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <button_1+0x120>
    19aa:	9a 83       	std	Y+2, r25	; 0x02
    19ac:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(10);
        data += 5;
    19ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b0:	8b 5f       	subi	r24, 0xFB	; 251
    19b2:	8f 87       	std	Y+15, r24	; 0x0f

    }
    return data ;
    19b4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    19b6:	2f 96       	adiw	r28, 0x0f	; 15
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <button_2>:
u8  button_2 (u8 data)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	2f 97       	sbiw	r28, 0x0f	; 15
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	8f 87       	std	Y+15, r24	; 0x0f
   // u8 data ;
    if (GET_BIT(PIND,6)==1){
    19de:	e0 e3       	ldi	r30, 0x30	; 48
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	82 95       	swap	r24
    19e6:	86 95       	lsr	r24
    19e8:	86 95       	lsr	r24
    19ea:	83 70       	andi	r24, 0x03	; 3
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	81 70       	andi	r24, 0x01	; 1
    19f2:	90 70       	andi	r25, 0x00	; 0
    19f4:	88 23       	and	r24, r24
    19f6:	09 f4       	brne	.+2      	; 0x19fa <button_2+0x32>
    19f8:	82 c0       	rjmp	.+260    	; 0x1afe <button_2+0x136>
     while (GET_BIT(PIND,6)==1);
    19fa:	e0 e3       	ldi	r30, 0x30	; 48
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	82 95       	swap	r24
    1a02:	86 95       	lsr	r24
    1a04:	86 95       	lsr	r24
    1a06:	83 70       	andi	r24, 0x03	; 3
    1a08:	88 2f       	mov	r24, r24
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	81 70       	andi	r24, 0x01	; 1
    1a0e:	90 70       	andi	r25, 0x00	; 0
    1a10:	88 23       	and	r24, r24
    1a12:	99 f7       	brne	.-26     	; 0x19fa <button_2+0x32>
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	a0 e2       	ldi	r26, 0x20	; 32
    1a1a:	b1 e4       	ldi	r27, 0x41	; 65
    1a1c:	8b 87       	std	Y+11, r24	; 0x0b
    1a1e:	9c 87       	std	Y+12, r25	; 0x0c
    1a20:	ad 87       	std	Y+13, r26	; 0x0d
    1a22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	4a e7       	ldi	r20, 0x7A	; 122
    1a32:	55 e4       	ldi	r21, 0x45	; 69
    1a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	8f 83       	std	Y+7, r24	; 0x07
    1a3e:	98 87       	std	Y+8, r25	; 0x08
    1a40:	a9 87       	std	Y+9, r26	; 0x09
    1a42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a44:	6f 81       	ldd	r22, Y+7	; 0x07
    1a46:	78 85       	ldd	r23, Y+8	; 0x08
    1a48:	89 85       	ldd	r24, Y+9	; 0x09
    1a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e8       	ldi	r20, 0x80	; 128
    1a52:	5f e3       	ldi	r21, 0x3F	; 63
    1a54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a58:	88 23       	and	r24, r24
    1a5a:	2c f4       	brge	.+10     	; 0x1a66 <button_2+0x9e>
		__ticks = 1;
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	9e 83       	std	Y+6, r25	; 0x06
    1a62:	8d 83       	std	Y+5, r24	; 0x05
    1a64:	3f c0       	rjmp	.+126    	; 0x1ae4 <button_2+0x11c>
	else if (__tmp > 65535)
    1a66:	6f 81       	ldd	r22, Y+7	; 0x07
    1a68:	78 85       	ldd	r23, Y+8	; 0x08
    1a6a:	89 85       	ldd	r24, Y+9	; 0x09
    1a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	3f ef       	ldi	r19, 0xFF	; 255
    1a72:	4f e7       	ldi	r20, 0x7F	; 127
    1a74:	57 e4       	ldi	r21, 0x47	; 71
    1a76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a7a:	18 16       	cp	r1, r24
    1a7c:	4c f5       	brge	.+82     	; 0x1ad0 <button_2+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e2       	ldi	r20, 0x20	; 32
    1a8c:	51 e4       	ldi	r21, 0x41	; 65
    1a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	bc 01       	movw	r22, r24
    1a98:	cd 01       	movw	r24, r26
    1a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	9e 83       	std	Y+6, r25	; 0x06
    1aa4:	8d 83       	std	Y+5, r24	; 0x05
    1aa6:	0f c0       	rjmp	.+30     	; 0x1ac6 <button_2+0xfe>
    1aa8:	80 e9       	ldi	r24, 0x90	; 144
    1aaa:	91 e0       	ldi	r25, 0x01	; 1
    1aac:	9c 83       	std	Y+4, r25	; 0x04
    1aae:	8b 83       	std	Y+3, r24	; 0x03
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <button_2+0xec>
    1ab8:	9c 83       	std	Y+4, r25	; 0x04
    1aba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	9e 83       	std	Y+6, r25	; 0x06
    1ac4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aca:	00 97       	sbiw	r24, 0x00	; 0
    1acc:	69 f7       	brne	.-38     	; 0x1aa8 <button_2+0xe0>
    1ace:	14 c0       	rjmp	.+40     	; 0x1af8 <button_2+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad2:	78 85       	ldd	r23, Y+8	; 0x08
    1ad4:	89 85       	ldd	r24, Y+9	; 0x09
    1ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	9a 83       	std	Y+2, r25	; 0x02
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	9a 81       	ldd	r25, Y+2	; 0x02
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <button_2+0x128>
    1af4:	9a 83       	std	Y+2, r25	; 0x02
    1af6:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(10);
        data -= 5;
    1af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1afa:	85 50       	subi	r24, 0x05	; 5
    1afc:	8f 87       	std	Y+15, r24	; 0x0f

    }
    return data ;
    1afe:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1b00:	2f 96       	adiw	r28, 0x0f	; 15
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <button_3>:
u8   button_3 (void)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	2f 97       	sbiw	r28, 0x0f	; 15
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    u8 counter = 0 ;
    1b26:	1f 86       	std	Y+15, r1	; 0x0f
    if (GET_BIT(PINB,0)==1){
    1b28:	e6 e3       	ldi	r30, 0x36	; 54
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	81 70       	andi	r24, 0x01	; 1
    1b34:	90 70       	andi	r25, 0x00	; 0
    1b36:	88 23       	and	r24, r24
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <button_3+0x2a>
    1b3a:	7e c0       	rjmp	.+252    	; 0x1c38 <button_3+0x126>
     while (GET_BIT(PINB,0)==1);
    1b3c:	e6 e3       	ldi	r30, 0x36	; 54
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	88 2f       	mov	r24, r24
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	81 70       	andi	r24, 0x01	; 1
    1b48:	90 70       	andi	r25, 0x00	; 0
    1b4a:	88 23       	and	r24, r24
    1b4c:	b9 f7       	brne	.-18     	; 0x1b3c <button_3+0x2a>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a0 e2       	ldi	r26, 0x20	; 32
    1b54:	b1 e4       	ldi	r27, 0x41	; 65
    1b56:	8b 87       	std	Y+11, r24	; 0x0b
    1b58:	9c 87       	std	Y+12, r25	; 0x0c
    1b5a:	ad 87       	std	Y+13, r26	; 0x0d
    1b5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	4a e7       	ldi	r20, 0x7A	; 122
    1b6c:	55 e4       	ldi	r21, 0x45	; 69
    1b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	8f 83       	std	Y+7, r24	; 0x07
    1b78:	98 87       	std	Y+8, r25	; 0x08
    1b7a:	a9 87       	std	Y+9, r26	; 0x09
    1b7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b80:	78 85       	ldd	r23, Y+8	; 0x08
    1b82:	89 85       	ldd	r24, Y+9	; 0x09
    1b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e8       	ldi	r20, 0x80	; 128
    1b8c:	5f e3       	ldi	r21, 0x3F	; 63
    1b8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b92:	88 23       	and	r24, r24
    1b94:	2c f4       	brge	.+10     	; 0x1ba0 <button_3+0x8e>
		__ticks = 1;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
    1b9e:	3f c0       	rjmp	.+126    	; 0x1c1e <button_3+0x10c>
	else if (__tmp > 65535)
    1ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba2:	78 85       	ldd	r23, Y+8	; 0x08
    1ba4:	89 85       	ldd	r24, Y+9	; 0x09
    1ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	3f ef       	ldi	r19, 0xFF	; 255
    1bac:	4f e7       	ldi	r20, 0x7F	; 127
    1bae:	57 e4       	ldi	r21, 0x47	; 71
    1bb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb4:	18 16       	cp	r1, r24
    1bb6:	4c f5       	brge	.+82     	; 0x1c0a <button_3+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e2       	ldi	r20, 0x20	; 32
    1bc6:	51 e4       	ldi	r21, 0x41	; 65
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	cd 01       	movw	r24, r26
    1bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9e 83       	std	Y+6, r25	; 0x06
    1bde:	8d 83       	std	Y+5, r24	; 0x05
    1be0:	0f c0       	rjmp	.+30     	; 0x1c00 <button_3+0xee>
    1be2:	80 e9       	ldi	r24, 0x90	; 144
    1be4:	91 e0       	ldi	r25, 0x01	; 1
    1be6:	9c 83       	std	Y+4, r25	; 0x04
    1be8:	8b 83       	std	Y+3, r24	; 0x03
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <button_3+0xdc>
    1bf2:	9c 83       	std	Y+4, r25	; 0x04
    1bf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	9e 83       	std	Y+6, r25	; 0x06
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c00:	8d 81       	ldd	r24, Y+5	; 0x05
    1c02:	9e 81       	ldd	r25, Y+6	; 0x06
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	69 f7       	brne	.-38     	; 0x1be2 <button_3+0xd0>
    1c08:	14 c0       	rjmp	.+40     	; 0x1c32 <button_3+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0c:	78 85       	ldd	r23, Y+8	; 0x08
    1c0e:	89 85       	ldd	r24, Y+9	; 0x09
    1c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	9e 83       	std	Y+6, r25	; 0x06
    1c1c:	8d 83       	std	Y+5, r24	; 0x05
    1c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c20:	9e 81       	ldd	r25, Y+6	; 0x06
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <button_3+0x118>
    1c2e:	9a 83       	std	Y+2, r25	; 0x02
    1c30:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(10);
       counter++;
    1c32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c34:	8f 5f       	subi	r24, 0xFF	; 255
    1c36:	8f 87       	std	Y+15, r24	; 0x0f


    }
    return counter ;
    1c38:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1c3a:	2f 96       	adiw	r28, 0x0f	; 15
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <main>:
u32 set_temperature = 600 ;
 u32 analog_value = 450;
 u32 data ;

int main(void)
{
    1c4c:	0f 93       	push	r16
    1c4e:	1f 93       	push	r17
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	c6 54       	subi	r28, 0x46	; 70
    1c5a:	d0 40       	sbci	r29, 0x00	; 0
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61

	 //  intit_pins();
	   EEPROM_INIT();
    1c66:	0e 94 ad 0a 	call	0x155a	; 0x155a <EEPROM_INIT>


 //  u32 digital;

  ;
  data=EEPROM_readData (4);
    1c6a:	84 e0       	ldi	r24, 0x04	; 4
    1c6c:	0e 94 cf 0a 	call	0x159e	; 0x159e <EEPROM_readData>
    1c70:	88 2f       	mov	r24, r24
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	a0 e0       	ldi	r26, 0x00	; 0
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	80 93 7b 01 	sts	0x017B, r24
    1c7c:	90 93 7c 01 	sts	0x017C, r25
    1c80:	a0 93 7d 01 	sts	0x017D, r26
    1c84:	b0 93 7e 01 	sts	0x017E, r27
  SET_BIT(DDRD,3);
    1c88:	a1 e3       	ldi	r26, 0x31	; 49
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e1 e3       	ldi	r30, 0x31	; 49
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	88 60       	ori	r24, 0x08	; 8
    1c94:	8c 93       	st	X, r24
  	SET_BIT(DDRC,2);
    1c96:	a4 e3       	ldi	r26, 0x34	; 52
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e4 e3       	ldi	r30, 0x34	; 52
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	84 60       	ori	r24, 0x04	; 4
    1ca2:	8c 93       	st	X, r24
  	SET_BIT(DDRC,7);
    1ca4:	a4 e3       	ldi	r26, 0x34	; 52
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e4 e3       	ldi	r30, 0x34	; 52
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	80 68       	ori	r24, 0x80	; 128
    1cb0:	8c 93       	st	X, r24
    timer1_init();
    1cb2:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <timer1_init>
 while(1)
 {
	 // OFF state
	 end:
	  	  PORTA = 0x00 ;
    1cb6:	eb e3       	ldi	r30, 0x3B	; 59
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	10 82       	st	Z, r1
	      PORTB = 0;
    1cbc:	e8 e3       	ldi	r30, 0x38	; 56
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	10 82       	st	Z, r1
	      PORTC = 0x00 ;
    1cc2:	e5 e3       	ldi	r30, 0x35	; 53
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	10 82       	st	Z, r1
	      PORTD = 0x00 ;
    1cc8:	e2 e3       	ldi	r30, 0x32	; 50
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	10 82       	st	Z, r1
	      power_flag = 0 ;
    1cce:	10 92 74 01 	sts	0x0174, r1

	 if (GET_BIT(PIND , 2) == 1 )  // ON button
    1cd2:	e0 e3       	ldi	r30, 0x30	; 48
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	86 95       	lsr	r24
    1cda:	86 95       	lsr	r24
    1cdc:	88 2f       	mov	r24, r24
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	81 70       	andi	r24, 0x01	; 1
    1ce2:	90 70       	andi	r25, 0x00	; 0
    1ce4:	88 23       	and	r24, r24
    1ce6:	39 f3       	breq	.-50     	; 0x1cb6 <main+0x6a>
	 {
		 while (GET_BIT(PIND,2)==1);  // take action on removing hand
    1ce8:	e0 e3       	ldi	r30, 0x30	; 48
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	86 95       	lsr	r24
    1cf0:	86 95       	lsr	r24
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	81 70       	andi	r24, 0x01	; 1
    1cf8:	90 70       	andi	r25, 0x00	; 0
    1cfa:	88 23       	and	r24, r24
    1cfc:	a9 f7       	brne	.-22     	; 0x1ce8 <main+0x9c>
    1cfe:	fe 01       	movw	r30, r28
    1d00:	ed 5b       	subi	r30, 0xBD	; 189
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	a0 e2       	ldi	r26, 0x20	; 32
    1d0a:	b1 e4       	ldi	r27, 0x41	; 65
    1d0c:	80 83       	st	Z, r24
    1d0e:	91 83       	std	Z+1, r25	; 0x01
    1d10:	a2 83       	std	Z+2, r26	; 0x02
    1d12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d14:	8e 01       	movw	r16, r28
    1d16:	01 5c       	subi	r16, 0xC1	; 193
    1d18:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	ed 5b       	subi	r30, 0xBD	; 189
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	60 81       	ld	r22, Z
    1d22:	71 81       	ldd	r23, Z+1	; 0x01
    1d24:	82 81       	ldd	r24, Z+2	; 0x02
    1d26:	93 81       	ldd	r25, Z+3	; 0x03
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	4a e7       	ldi	r20, 0x7A	; 122
    1d2e:	55 e4       	ldi	r21, 0x45	; 69
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	f8 01       	movw	r30, r16
    1d3a:	80 83       	st	Z, r24
    1d3c:	91 83       	std	Z+1, r25	; 0x01
    1d3e:	a2 83       	std	Z+2, r26	; 0x02
    1d40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d42:	fe 01       	movw	r30, r28
    1d44:	ff 96       	adiw	r30, 0x3f	; 63
    1d46:	60 81       	ld	r22, Z
    1d48:	71 81       	ldd	r23, Z+1	; 0x01
    1d4a:	82 81       	ldd	r24, Z+2	; 0x02
    1d4c:	93 81       	ldd	r25, Z+3	; 0x03
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e8       	ldi	r20, 0x80	; 128
    1d54:	5f e3       	ldi	r21, 0x3F	; 63
    1d56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d5a:	88 23       	and	r24, r24
    1d5c:	2c f4       	brge	.+10     	; 0x1d68 <main+0x11c>
		__ticks = 1;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9e af       	std	Y+62, r25	; 0x3e
    1d64:	8d af       	std	Y+61, r24	; 0x3d
    1d66:	46 c0       	rjmp	.+140    	; 0x1df4 <main+0x1a8>
	else if (__tmp > 65535)
    1d68:	fe 01       	movw	r30, r28
    1d6a:	ff 96       	adiw	r30, 0x3f	; 63
    1d6c:	60 81       	ld	r22, Z
    1d6e:	71 81       	ldd	r23, Z+1	; 0x01
    1d70:	82 81       	ldd	r24, Z+2	; 0x02
    1d72:	93 81       	ldd	r25, Z+3	; 0x03
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	3f ef       	ldi	r19, 0xFF	; 255
    1d78:	4f e7       	ldi	r20, 0x7F	; 127
    1d7a:	57 e4       	ldi	r21, 0x47	; 71
    1d7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d80:	18 16       	cp	r1, r24
    1d82:	64 f5       	brge	.+88     	; 0x1ddc <main+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d84:	fe 01       	movw	r30, r28
    1d86:	ed 5b       	subi	r30, 0xBD	; 189
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	60 81       	ld	r22, Z
    1d8c:	71 81       	ldd	r23, Z+1	; 0x01
    1d8e:	82 81       	ldd	r24, Z+2	; 0x02
    1d90:	93 81       	ldd	r25, Z+3	; 0x03
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e2       	ldi	r20, 0x20	; 32
    1d98:	51 e4       	ldi	r21, 0x41	; 65
    1d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	9e af       	std	Y+62, r25	; 0x3e
    1db0:	8d af       	std	Y+61, r24	; 0x3d
    1db2:	0f c0       	rjmp	.+30     	; 0x1dd2 <main+0x186>
    1db4:	80 e9       	ldi	r24, 0x90	; 144
    1db6:	91 e0       	ldi	r25, 0x01	; 1
    1db8:	9c af       	std	Y+60, r25	; 0x3c
    1dba:	8b af       	std	Y+59, r24	; 0x3b
    1dbc:	8b ad       	ldd	r24, Y+59	; 0x3b
    1dbe:	9c ad       	ldd	r25, Y+60	; 0x3c
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <main+0x174>
    1dc4:	9c af       	std	Y+60, r25	; 0x3c
    1dc6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dca:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	9e af       	std	Y+62, r25	; 0x3e
    1dd0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dd4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	69 f7       	brne	.-38     	; 0x1db4 <main+0x168>
    1dda:	16 c0       	rjmp	.+44     	; 0x1e08 <main+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ddc:	fe 01       	movw	r30, r28
    1dde:	ff 96       	adiw	r30, 0x3f	; 63
    1de0:	60 81       	ld	r22, Z
    1de2:	71 81       	ldd	r23, Z+1	; 0x01
    1de4:	82 81       	ldd	r24, Z+2	; 0x02
    1de6:	93 81       	ldd	r25, Z+3	; 0x03
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9e af       	std	Y+62, r25	; 0x3e
    1df2:	8d af       	std	Y+61, r24	; 0x3d
    1df4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1df6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1df8:	9a af       	std	Y+58, r25	; 0x3a
    1dfa:	89 af       	std	Y+57, r24	; 0x39
    1dfc:	89 ad       	ldd	r24, Y+57	; 0x39
    1dfe:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <main+0x1b4>
    1e04:	9a af       	std	Y+58, r25	; 0x3a
    1e06:	89 af       	std	Y+57, r24	; 0x39
		        _delay_ms(10);
		 power_flag++ ;
    1e08:	80 91 74 01 	lds	r24, 0x0174
    1e0c:	8f 5f       	subi	r24, 0xFF	; 255
    1e0e:	80 93 74 01 	sts	0x0174, r24
		 if ( power_flag %2 == 1 )
    1e12:	80 91 74 01 	lds	r24, 0x0174
    1e16:	88 2f       	mov	r24, r24
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	81 70       	andi	r24, 0x01	; 1
    1e1c:	90 70       	andi	r25, 0x00	; 0
    1e1e:	88 23       	and	r24, r24
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <main+0x1d8>
    1e22:	49 cf       	rjmp	.-366    	; 0x1cb6 <main+0x6a>
		 		{
			      intit_pins();
    1e24:	0e 94 76 13 	call	0x26ec	; 0x26ec <intit_pins>

			        start:
					 while  (GET_BIT(TIFR,2)==0)  // Timer with adc read
    1e28:	e8 e5       	ldi	r30, 0x58	; 88
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	86 95       	lsr	r24
    1e30:	86 95       	lsr	r24
    1e32:	88 2f       	mov	r24, r24
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	81 70       	andi	r24, 0x01	; 1
    1e38:	90 70       	andi	r25, 0x00	; 0
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <main+0x1f4>
    1e3e:	b0 c0       	rjmp	.+352    	; 0x1fa0 <main+0x354>
							   	 {
							timer2_init();
    1e40:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <timer2_init>
					       // digital = ADC1_Read(0);
						   //   analog_value = ((digital*5*1000)/1024);
						     display ((analog_value/10));
    1e44:	80 91 6c 01 	lds	r24, 0x016C
    1e48:	90 91 6d 01 	lds	r25, 0x016D
    1e4c:	a0 91 6e 01 	lds	r26, 0x016E
    1e50:	b0 91 6f 01 	lds	r27, 0x016F
    1e54:	2a e0       	ldi	r18, 0x0A	; 10
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	50 e0       	ldi	r21, 0x00	; 0
    1e5c:	bc 01       	movw	r22, r24
    1e5e:	cd 01       	movw	r24, r26
    1e60:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__udivmodsi4>
    1e64:	da 01       	movw	r26, r20
    1e66:	c9 01       	movw	r24, r18
    1e68:	bc 01       	movw	r22, r24
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	0e 94 9b 13 	call	0x2736	; 0x2736 <display>

				      if(analog_value <= (set_temperature - 40)) // Heater and cooler
    1e70:	80 91 68 01 	lds	r24, 0x0168
    1e74:	90 91 69 01 	lds	r25, 0x0169
    1e78:	a0 91 6a 01 	lds	r26, 0x016A
    1e7c:	b0 91 6b 01 	lds	r27, 0x016B
    1e80:	9c 01       	movw	r18, r24
    1e82:	ad 01       	movw	r20, r26
    1e84:	28 52       	subi	r18, 0x28	; 40
    1e86:	30 40       	sbci	r19, 0x00	; 0
    1e88:	40 40       	sbci	r20, 0x00	; 0
    1e8a:	50 40       	sbci	r21, 0x00	; 0
    1e8c:	80 91 6c 01 	lds	r24, 0x016C
    1e90:	90 91 6d 01 	lds	r25, 0x016D
    1e94:	a0 91 6e 01 	lds	r26, 0x016E
    1e98:	b0 91 6f 01 	lds	r27, 0x016F
    1e9c:	28 17       	cp	r18, r24
    1e9e:	39 07       	cpc	r19, r25
    1ea0:	4a 07       	cpc	r20, r26
    1ea2:	5b 07       	cpc	r21, r27
    1ea4:	a8 f0       	brcs	.+42     	; 0x1ed0 <main+0x284>
				       {

							     	SET_BIT(TIMSK, 6);
    1ea6:	a9 e5       	ldi	r26, 0x59	; 89
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e9 e5       	ldi	r30, 0x59	; 89
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	80 64       	ori	r24, 0x40	; 64
    1eb2:	8c 93       	st	X, r24
							        SET_BIT(PORTC,2); // heating led
    1eb4:	a5 e3       	ldi	r26, 0x35	; 53
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e5 e3       	ldi	r30, 0x35	; 53
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	84 60       	ori	r24, 0x04	; 4
    1ec0:	8c 93       	st	X, r24
							        CLR_BIT(PORTC,7); // cooling led
    1ec2:	a5 e3       	ldi	r26, 0x35	; 53
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e5 e3       	ldi	r30, 0x35	; 53
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	8f 77       	andi	r24, 0x7F	; 127
    1ece:	8c 93       	st	X, r24
							       }
							      if(analog_value >= (set_temperature + 50))
    1ed0:	80 91 68 01 	lds	r24, 0x0168
    1ed4:	90 91 69 01 	lds	r25, 0x0169
    1ed8:	a0 91 6a 01 	lds	r26, 0x016A
    1edc:	b0 91 6b 01 	lds	r27, 0x016B
    1ee0:	9c 01       	movw	r18, r24
    1ee2:	ad 01       	movw	r20, r26
    1ee4:	2e 5c       	subi	r18, 0xCE	; 206
    1ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee8:	4f 4f       	sbci	r20, 0xFF	; 255
    1eea:	5f 4f       	sbci	r21, 0xFF	; 255
    1eec:	80 91 6c 01 	lds	r24, 0x016C
    1ef0:	90 91 6d 01 	lds	r25, 0x016D
    1ef4:	a0 91 6e 01 	lds	r26, 0x016E
    1ef8:	b0 91 6f 01 	lds	r27, 0x016F
    1efc:	82 17       	cp	r24, r18
    1efe:	93 07       	cpc	r25, r19
    1f00:	a4 07       	cpc	r26, r20
    1f02:	b5 07       	cpc	r27, r21
    1f04:	e0 f0       	brcs	.+56     	; 0x1f3e <main+0x2f2>
							       {
							    	CLR_BIT(TIMSK, 6);
    1f06:	a9 e5       	ldi	r26, 0x59	; 89
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e9 e5       	ldi	r30, 0x59	; 89
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	8f 7b       	andi	r24, 0xBF	; 191
    1f12:	8c 93       	st	X, r24
						           SET_BIT(PORTC,7);
    1f14:	a5 e3       	ldi	r26, 0x35	; 53
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e5 e3       	ldi	r30, 0x35	; 53
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	80 68       	ori	r24, 0x80	; 128
    1f20:	8c 93       	st	X, r24
							       SET_BIT(PORTD,3);  // indicator led
    1f22:	a2 e3       	ldi	r26, 0x32	; 50
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e2 e3       	ldi	r30, 0x32	; 50
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	88 60       	ori	r24, 0x08	; 8
    1f2e:	8c 93       	st	X, r24
							       CLR_BIT(PORTC,2);
    1f30:	a5 e3       	ldi	r26, 0x35	; 53
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e5 e3       	ldi	r30, 0x35	; 53
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	8b 7f       	andi	r24, 0xFB	; 251
    1f3c:	8c 93       	st	X, r24
							       }
							      if (analog_value == set_temperature)
    1f3e:	20 91 6c 01 	lds	r18, 0x016C
    1f42:	30 91 6d 01 	lds	r19, 0x016D
    1f46:	40 91 6e 01 	lds	r20, 0x016E
    1f4a:	50 91 6f 01 	lds	r21, 0x016F
    1f4e:	80 91 68 01 	lds	r24, 0x0168
    1f52:	90 91 69 01 	lds	r25, 0x0169
    1f56:	a0 91 6a 01 	lds	r26, 0x016A
    1f5a:	b0 91 6b 01 	lds	r27, 0x016B
    1f5e:	28 17       	cp	r18, r24
    1f60:	39 07       	cpc	r19, r25
    1f62:	4a 07       	cpc	r20, r26
    1f64:	5b 07       	cpc	r21, r27
    1f66:	e1 f4       	brne	.+56     	; 0x1fa0 <main+0x354>
							       {
							        CLR_BIT(TIMSK, 6);
    1f68:	a9 e5       	ldi	r26, 0x59	; 89
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e9 e5       	ldi	r30, 0x59	; 89
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	8f 7b       	andi	r24, 0xBF	; 191
    1f74:	8c 93       	st	X, r24
							        CLR_BIT(PORTC,2);
    1f76:	a5 e3       	ldi	r26, 0x35	; 53
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e5 e3       	ldi	r30, 0x35	; 53
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	8b 7f       	andi	r24, 0xFB	; 251
    1f82:	8c 93       	st	X, r24
							        CLR_BIT(PORTC,7);
    1f84:	a5 e3       	ldi	r26, 0x35	; 53
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e5 e3       	ldi	r30, 0x35	; 53
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8f 77       	andi	r24, 0x7F	; 127
    1f90:	8c 93       	st	X, r24
							        CLR_BIT(PORTD,3);
    1f92:	a2 e3       	ldi	r26, 0x32	; 50
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e2 e3       	ldi	r30, 0x32	; 50
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	87 7f       	andi	r24, 0xF7	; 247
    1f9e:	8c 93       	st	X, r24
										}
					 code:
			 while(1)
			 {

				 display ((analog_value/10));
    1fa0:	80 91 6c 01 	lds	r24, 0x016C
    1fa4:	90 91 6d 01 	lds	r25, 0x016D
    1fa8:	a0 91 6e 01 	lds	r26, 0x016E
    1fac:	b0 91 6f 01 	lds	r27, 0x016F
    1fb0:	2a e0       	ldi	r18, 0x0A	; 10
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__udivmodsi4>
    1fc0:	da 01       	movw	r26, r20
    1fc2:	c9 01       	movw	r24, r18
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	0e 94 9b 13 	call	0x2736	; 0x2736 <display>
				 if (GET_BIT(PIND , 2) == 1 )  // OFF button
    1fcc:	e0 e3       	ldi	r30, 0x30	; 48
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	86 95       	lsr	r24
    1fd4:	86 95       	lsr	r24
    1fd6:	88 2f       	mov	r24, r24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	81 70       	andi	r24, 0x01	; 1
    1fdc:	90 70       	andi	r25, 0x00	; 0
    1fde:	88 23       	and	r24, r24
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <main+0x398>
    1fe2:	8b c0       	rjmp	.+278    	; 0x20fa <main+0x4ae>
					 {
					 while (GET_BIT(PIND,2)==1);
    1fe4:	e0 e3       	ldi	r30, 0x30	; 48
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	86 95       	lsr	r24
    1fec:	86 95       	lsr	r24
    1fee:	88 2f       	mov	r24, r24
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	81 70       	andi	r24, 0x01	; 1
    1ff4:	90 70       	andi	r25, 0x00	; 0
    1ff6:	88 23       	and	r24, r24
    1ff8:	a9 f7       	brne	.-22     	; 0x1fe4 <main+0x398>
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	a0 e2       	ldi	r26, 0x20	; 32
    2000:	b1 e4       	ldi	r27, 0x41	; 65
    2002:	8d ab       	std	Y+53, r24	; 0x35
    2004:	9e ab       	std	Y+54, r25	; 0x36
    2006:	af ab       	std	Y+55, r26	; 0x37
    2008:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200a:	6d a9       	ldd	r22, Y+53	; 0x35
    200c:	7e a9       	ldd	r23, Y+54	; 0x36
    200e:	8f a9       	ldd	r24, Y+55	; 0x37
    2010:	98 ad       	ldd	r25, Y+56	; 0x38
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	4a e7       	ldi	r20, 0x7A	; 122
    2018:	55 e4       	ldi	r21, 0x45	; 69
    201a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	89 ab       	std	Y+49, r24	; 0x31
    2024:	9a ab       	std	Y+50, r25	; 0x32
    2026:	ab ab       	std	Y+51, r26	; 0x33
    2028:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    202a:	69 a9       	ldd	r22, Y+49	; 0x31
    202c:	7a a9       	ldd	r23, Y+50	; 0x32
    202e:	8b a9       	ldd	r24, Y+51	; 0x33
    2030:	9c a9       	ldd	r25, Y+52	; 0x34
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e8       	ldi	r20, 0x80	; 128
    2038:	5f e3       	ldi	r21, 0x3F	; 63
    203a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    203e:	88 23       	and	r24, r24
    2040:	2c f4       	brge	.+10     	; 0x204c <main+0x400>
		__ticks = 1;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	98 ab       	std	Y+48, r25	; 0x30
    2048:	8f a7       	std	Y+47, r24	; 0x2f
    204a:	3f c0       	rjmp	.+126    	; 0x20ca <main+0x47e>
	else if (__tmp > 65535)
    204c:	69 a9       	ldd	r22, Y+49	; 0x31
    204e:	7a a9       	ldd	r23, Y+50	; 0x32
    2050:	8b a9       	ldd	r24, Y+51	; 0x33
    2052:	9c a9       	ldd	r25, Y+52	; 0x34
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	3f ef       	ldi	r19, 0xFF	; 255
    2058:	4f e7       	ldi	r20, 0x7F	; 127
    205a:	57 e4       	ldi	r21, 0x47	; 71
    205c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2060:	18 16       	cp	r1, r24
    2062:	4c f5       	brge	.+82     	; 0x20b6 <main+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2064:	6d a9       	ldd	r22, Y+53	; 0x35
    2066:	7e a9       	ldd	r23, Y+54	; 0x36
    2068:	8f a9       	ldd	r24, Y+55	; 0x37
    206a:	98 ad       	ldd	r25, Y+56	; 0x38
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e2       	ldi	r20, 0x20	; 32
    2072:	51 e4       	ldi	r21, 0x41	; 65
    2074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	bc 01       	movw	r22, r24
    207e:	cd 01       	movw	r24, r26
    2080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	98 ab       	std	Y+48, r25	; 0x30
    208a:	8f a7       	std	Y+47, r24	; 0x2f
    208c:	0f c0       	rjmp	.+30     	; 0x20ac <main+0x460>
    208e:	80 e9       	ldi	r24, 0x90	; 144
    2090:	91 e0       	ldi	r25, 0x01	; 1
    2092:	9e a7       	std	Y+46, r25	; 0x2e
    2094:	8d a7       	std	Y+45, r24	; 0x2d
    2096:	8d a5       	ldd	r24, Y+45	; 0x2d
    2098:	9e a5       	ldd	r25, Y+46	; 0x2e
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	f1 f7       	brne	.-4      	; 0x209a <main+0x44e>
    209e:	9e a7       	std	Y+46, r25	; 0x2e
    20a0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a4:	98 a9       	ldd	r25, Y+48	; 0x30
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	98 ab       	std	Y+48, r25	; 0x30
    20aa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ae:	98 a9       	ldd	r25, Y+48	; 0x30
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	69 f7       	brne	.-38     	; 0x208e <main+0x442>
    20b4:	14 c0       	rjmp	.+40     	; 0x20de <main+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b6:	69 a9       	ldd	r22, Y+49	; 0x31
    20b8:	7a a9       	ldd	r23, Y+50	; 0x32
    20ba:	8b a9       	ldd	r24, Y+51	; 0x33
    20bc:	9c a9       	ldd	r25, Y+52	; 0x34
    20be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	98 ab       	std	Y+48, r25	; 0x30
    20c8:	8f a7       	std	Y+47, r24	; 0x2f
    20ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    20cc:	98 a9       	ldd	r25, Y+48	; 0x30
    20ce:	9c a7       	std	Y+44, r25	; 0x2c
    20d0:	8b a7       	std	Y+43, r24	; 0x2b
    20d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    20d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <main+0x48a>
    20da:	9c a7       	std	Y+44, r25	; 0x2c
    20dc:	8b a7       	std	Y+43, r24	; 0x2b
					        _delay_ms(10);
						 power_flag++ ;
    20de:	80 91 74 01 	lds	r24, 0x0174
    20e2:	8f 5f       	subi	r24, 0xFF	; 255
    20e4:	80 93 74 01 	sts	0x0174, r24
				 if(power_flag % 2 ==0)
    20e8:	80 91 74 01 	lds	r24, 0x0174
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	81 70       	andi	r24, 0x01	; 1
    20f2:	90 70       	andi	r25, 0x00	; 0
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	09 f4       	brne	.+2      	; 0x20fa <main+0x4ae>
    20f8:	de cd       	rjmp	.-1092   	; 0x1cb6 <main+0x6a>
				 }
					 }



        		 if( (GET_BIT(PINB,0)==1) || (GET_BIT(PIND,6)==1)) // Enter setting mode
    20fa:	e6 e3       	ldi	r30, 0x36	; 54
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	88 2f       	mov	r24, r24
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	81 70       	andi	r24, 0x01	; 1
    2106:	90 70       	andi	r25, 0x00	; 0
    2108:	88 23       	and	r24, r24
    210a:	71 f4       	brne	.+28     	; 0x2128 <main+0x4dc>
    210c:	e0 e3       	ldi	r30, 0x30	; 48
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	82 95       	swap	r24
    2114:	86 95       	lsr	r24
    2116:	86 95       	lsr	r24
    2118:	83 70       	andi	r24, 0x03	; 3
    211a:	88 2f       	mov	r24, r24
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	81 70       	andi	r24, 0x01	; 1
    2120:	90 70       	andi	r25, 0x00	; 0
    2122:	88 23       	and	r24, r24
    2124:	09 f4       	brne	.+2      	; 0x2128 <main+0x4dc>
    2126:	3c cf       	rjmp	.-392    	; 0x1fa0 <main+0x354>
        		 {
        			 // stop heater and cooler and their led
        			  CLR_BIT(PORTC,2);
    2128:	a5 e3       	ldi	r26, 0x35	; 53
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	e5 e3       	ldi	r30, 0x35	; 53
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	8b 7f       	andi	r24, 0xFB	; 251
    2134:	8c 93       	st	X, r24
        		      CLR_BIT(PORTC,7);
    2136:	a5 e3       	ldi	r26, 0x35	; 53
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e5 e3       	ldi	r30, 0x35	; 53
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	8f 77       	andi	r24, 0x7F	; 127
    2142:	8c 93       	st	X, r24
        			  CLR_BIT(PORTD,3);
    2144:	a2 e3       	ldi	r26, 0x32	; 50
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e2 e3       	ldi	r30, 0x32	; 50
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	87 7f       	andi	r24, 0xF7	; 247
    2150:	8c 93       	st	X, r24

        			 timer_init();
    2152:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <timer_init>
    2156:	2c c0       	rjmp	.+88     	; 0x21b0 <main+0x564>
                        	while (1)
                                	{
                                     // 5 seconds timer to exit setting mode
        	                      while((GET_BIT(TIFR , 0)) == 0 )
        	                      {
        	                    	  counter_timer++ ;
    2158:	80 91 70 01 	lds	r24, 0x0170
    215c:	90 91 71 01 	lds	r25, 0x0171
    2160:	a0 91 72 01 	lds	r26, 0x0172
    2164:	b0 91 73 01 	lds	r27, 0x0173
    2168:	01 96       	adiw	r24, 0x01	; 1
    216a:	a1 1d       	adc	r26, r1
    216c:	b1 1d       	adc	r27, r1
    216e:	80 93 70 01 	sts	0x0170, r24
    2172:	90 93 71 01 	sts	0x0171, r25
    2176:	a0 93 72 01 	sts	0x0172, r26
    217a:	b0 93 73 01 	sts	0x0173, r27

        	                    	  if ( counter_timer == 103767)
    217e:	80 91 70 01 	lds	r24, 0x0170
    2182:	90 91 71 01 	lds	r25, 0x0171
    2186:	a0 91 72 01 	lds	r26, 0x0172
    218a:	b0 91 73 01 	lds	r27, 0x0173
    218e:	87 35       	cpi	r24, 0x57	; 87
    2190:	f5 e9       	ldi	r31, 0x95	; 149
    2192:	9f 07       	cpc	r25, r31
    2194:	f1 e0       	ldi	r31, 0x01	; 1
    2196:	af 07       	cpc	r26, r31
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	bf 07       	cpc	r27, r31
    219c:	49 f4       	brne	.+18     	; 0x21b0 <main+0x564>
        	                    	  {
        	                    		  counter_timer = 0 ;
    219e:	10 92 70 01 	sts	0x0170, r1
    21a2:	10 92 71 01 	sts	0x0171, r1
    21a6:	10 92 72 01 	sts	0x0172, r1
    21aa:	10 92 73 01 	sts	0x0173, r1
    21ae:	3c ce       	rjmp	.-904    	; 0x1e28 <main+0x1dc>


                        	while (1)
                                	{
                                     // 5 seconds timer to exit setting mode
        	                      while((GET_BIT(TIFR , 0)) == 0 )
    21b0:	e8 e5       	ldi	r30, 0x58	; 88
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	88 2f       	mov	r24, r24
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	81 70       	andi	r24, 0x01	; 1
    21bc:	90 70       	andi	r25, 0x00	; 0
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	59 f2       	breq	.-106    	; 0x2158 <main+0x50c>
        	                    	     goto start ;

        	                    	  }
        	                      }

        	                      display(data);
    21c2:	80 91 7b 01 	lds	r24, 0x017B
    21c6:	90 91 7c 01 	lds	r25, 0x017C
    21ca:	a0 91 7d 01 	lds	r26, 0x017D
    21ce:	b0 91 7e 01 	lds	r27, 0x017E
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 9b 13 	call	0x2736	; 0x2736 <display>
        	                      // Rising button
        			         if (GET_BIT(PINB,0)==1){
    21da:	e6 e3       	ldi	r30, 0x36	; 54
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	88 2f       	mov	r24, r24
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	81 70       	andi	r24, 0x01	; 1
    21e6:	90 70       	andi	r25, 0x00	; 0
    21e8:	88 23       	and	r24, r24
    21ea:	09 f4       	brne	.+2      	; 0x21ee <main+0x5a2>
    21ec:	b2 c0       	rjmp	.+356    	; 0x2352 <main+0x706>
        			            while (GET_BIT(PIND,2)==1);
    21ee:	e0 e3       	ldi	r30, 0x30	; 48
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	86 95       	lsr	r24
    21f6:	86 95       	lsr	r24
    21f8:	88 2f       	mov	r24, r24
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	81 70       	andi	r24, 0x01	; 1
    21fe:	90 70       	andi	r25, 0x00	; 0
    2200:	88 23       	and	r24, r24
    2202:	a9 f7       	brne	.-22     	; 0x21ee <main+0x5a2>
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	a0 e2       	ldi	r26, 0x20	; 32
    220a:	b1 e4       	ldi	r27, 0x41	; 65
    220c:	8f a3       	std	Y+39, r24	; 0x27
    220e:	98 a7       	std	Y+40, r25	; 0x28
    2210:	a9 a7       	std	Y+41, r26	; 0x29
    2212:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2214:	6f a1       	ldd	r22, Y+39	; 0x27
    2216:	78 a5       	ldd	r23, Y+40	; 0x28
    2218:	89 a5       	ldd	r24, Y+41	; 0x29
    221a:	9a a5       	ldd	r25, Y+42	; 0x2a
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	4a e7       	ldi	r20, 0x7A	; 122
    2222:	55 e4       	ldi	r21, 0x45	; 69
    2224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	8b a3       	std	Y+35, r24	; 0x23
    222e:	9c a3       	std	Y+36, r25	; 0x24
    2230:	ad a3       	std	Y+37, r26	; 0x25
    2232:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2234:	6b a1       	ldd	r22, Y+35	; 0x23
    2236:	7c a1       	ldd	r23, Y+36	; 0x24
    2238:	8d a1       	ldd	r24, Y+37	; 0x25
    223a:	9e a1       	ldd	r25, Y+38	; 0x26
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e8       	ldi	r20, 0x80	; 128
    2242:	5f e3       	ldi	r21, 0x3F	; 63
    2244:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2248:	88 23       	and	r24, r24
    224a:	2c f4       	brge	.+10     	; 0x2256 <main+0x60a>
		__ticks = 1;
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	9a a3       	std	Y+34, r25	; 0x22
    2252:	89 a3       	std	Y+33, r24	; 0x21
    2254:	3f c0       	rjmp	.+126    	; 0x22d4 <main+0x688>
	else if (__tmp > 65535)
    2256:	6b a1       	ldd	r22, Y+35	; 0x23
    2258:	7c a1       	ldd	r23, Y+36	; 0x24
    225a:	8d a1       	ldd	r24, Y+37	; 0x25
    225c:	9e a1       	ldd	r25, Y+38	; 0x26
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	3f ef       	ldi	r19, 0xFF	; 255
    2262:	4f e7       	ldi	r20, 0x7F	; 127
    2264:	57 e4       	ldi	r21, 0x47	; 71
    2266:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    226a:	18 16       	cp	r1, r24
    226c:	4c f5       	brge	.+82     	; 0x22c0 <main+0x674>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226e:	6f a1       	ldd	r22, Y+39	; 0x27
    2270:	78 a5       	ldd	r23, Y+40	; 0x28
    2272:	89 a5       	ldd	r24, Y+41	; 0x29
    2274:	9a a5       	ldd	r25, Y+42	; 0x2a
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e2       	ldi	r20, 0x20	; 32
    227c:	51 e4       	ldi	r21, 0x41	; 65
    227e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	bc 01       	movw	r22, r24
    2288:	cd 01       	movw	r24, r26
    228a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	9a a3       	std	Y+34, r25	; 0x22
    2294:	89 a3       	std	Y+33, r24	; 0x21
    2296:	0f c0       	rjmp	.+30     	; 0x22b6 <main+0x66a>
    2298:	80 e9       	ldi	r24, 0x90	; 144
    229a:	91 e0       	ldi	r25, 0x01	; 1
    229c:	98 a3       	std	Y+32, r25	; 0x20
    229e:	8f 8f       	std	Y+31, r24	; 0x1f
    22a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22a2:	98 a1       	ldd	r25, Y+32	; 0x20
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	f1 f7       	brne	.-4      	; 0x22a4 <main+0x658>
    22a8:	98 a3       	std	Y+32, r25	; 0x20
    22aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ac:	89 a1       	ldd	r24, Y+33	; 0x21
    22ae:	9a a1       	ldd	r25, Y+34	; 0x22
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	9a a3       	std	Y+34, r25	; 0x22
    22b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b6:	89 a1       	ldd	r24, Y+33	; 0x21
    22b8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	69 f7       	brne	.-38     	; 0x2298 <main+0x64c>
    22be:	14 c0       	rjmp	.+40     	; 0x22e8 <main+0x69c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c0:	6b a1       	ldd	r22, Y+35	; 0x23
    22c2:	7c a1       	ldd	r23, Y+36	; 0x24
    22c4:	8d a1       	ldd	r24, Y+37	; 0x25
    22c6:	9e a1       	ldd	r25, Y+38	; 0x26
    22c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	9a a3       	std	Y+34, r25	; 0x22
    22d2:	89 a3       	std	Y+33, r24	; 0x21
    22d4:	89 a1       	ldd	r24, Y+33	; 0x21
    22d6:	9a a1       	ldd	r25, Y+34	; 0x22
    22d8:	9e 8f       	std	Y+30, r25	; 0x1e
    22da:	8d 8f       	std	Y+29, r24	; 0x1d
    22dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	f1 f7       	brne	.-4      	; 0x22e0 <main+0x694>
    22e4:	9e 8f       	std	Y+30, r25	; 0x1e
    22e6:	8d 8f       	std	Y+29, r24	; 0x1d
        			               _delay_ms(10);
        			               data += 5;
    22e8:	80 91 7b 01 	lds	r24, 0x017B
    22ec:	90 91 7c 01 	lds	r25, 0x017C
    22f0:	a0 91 7d 01 	lds	r26, 0x017D
    22f4:	b0 91 7e 01 	lds	r27, 0x017E
    22f8:	05 96       	adiw	r24, 0x05	; 5
    22fa:	a1 1d       	adc	r26, r1
    22fc:	b1 1d       	adc	r27, r1
    22fe:	80 93 7b 01 	sts	0x017B, r24
    2302:	90 93 7c 01 	sts	0x017C, r25
    2306:	a0 93 7d 01 	sts	0x017D, r26
    230a:	b0 93 7e 01 	sts	0x017E, r27
        			               set_temperature = (data*10) ;
    230e:	80 91 7b 01 	lds	r24, 0x017B
    2312:	90 91 7c 01 	lds	r25, 0x017C
    2316:	a0 91 7d 01 	lds	r26, 0x017D
    231a:	b0 91 7e 01 	lds	r27, 0x017E
    231e:	2a e0       	ldi	r18, 0x0A	; 10
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e0       	ldi	r20, 0x00	; 0
    2324:	50 e0       	ldi	r21, 0x00	; 0
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__mulsi3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	80 93 68 01 	sts	0x0168, r24
    2336:	90 93 69 01 	sts	0x0169, r25
    233a:	a0 93 6a 01 	sts	0x016A, r26
    233e:	b0 93 6b 01 	sts	0x016B, r27
        			               counter_timer = 0 ;
    2342:	10 92 70 01 	sts	0x0170, r1
    2346:	10 92 71 01 	sts	0x0171, r1
    234a:	10 92 72 01 	sts	0x0172, r1
    234e:	10 92 73 01 	sts	0x0173, r1


        			         }

                                     // decreasing button
        			         if (GET_BIT(PIND,6)==1){
    2352:	e0 e3       	ldi	r30, 0x30	; 48
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	82 95       	swap	r24
    235a:	86 95       	lsr	r24
    235c:	86 95       	lsr	r24
    235e:	83 70       	andi	r24, 0x03	; 3
    2360:	88 2f       	mov	r24, r24
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	81 70       	andi	r24, 0x01	; 1
    2366:	90 70       	andi	r25, 0x00	; 0
    2368:	88 23       	and	r24, r24
    236a:	09 f4       	brne	.+2      	; 0x236e <main+0x722>
    236c:	b4 c0       	rjmp	.+360    	; 0x24d6 <main+0x88a>
        			              while (GET_BIT(PIND,6)==1);
    236e:	e0 e3       	ldi	r30, 0x30	; 48
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	82 95       	swap	r24
    2376:	86 95       	lsr	r24
    2378:	86 95       	lsr	r24
    237a:	83 70       	andi	r24, 0x03	; 3
    237c:	88 2f       	mov	r24, r24
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	81 70       	andi	r24, 0x01	; 1
    2382:	90 70       	andi	r25, 0x00	; 0
    2384:	88 23       	and	r24, r24
    2386:	99 f7       	brne	.-26     	; 0x236e <main+0x722>
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	a0 e2       	ldi	r26, 0x20	; 32
    238e:	b1 e4       	ldi	r27, 0x41	; 65
    2390:	89 8f       	std	Y+25, r24	; 0x19
    2392:	9a 8f       	std	Y+26, r25	; 0x1a
    2394:	ab 8f       	std	Y+27, r26	; 0x1b
    2396:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2398:	69 8d       	ldd	r22, Y+25	; 0x19
    239a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    239c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    239e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	4a e7       	ldi	r20, 0x7A	; 122
    23a6:	55 e4       	ldi	r21, 0x45	; 69
    23a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	8d 8b       	std	Y+21, r24	; 0x15
    23b2:	9e 8b       	std	Y+22, r25	; 0x16
    23b4:	af 8b       	std	Y+23, r26	; 0x17
    23b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23b8:	6d 89       	ldd	r22, Y+21	; 0x15
    23ba:	7e 89       	ldd	r23, Y+22	; 0x16
    23bc:	8f 89       	ldd	r24, Y+23	; 0x17
    23be:	98 8d       	ldd	r25, Y+24	; 0x18
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e8       	ldi	r20, 0x80	; 128
    23c6:	5f e3       	ldi	r21, 0x3F	; 63
    23c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23cc:	88 23       	and	r24, r24
    23ce:	2c f4       	brge	.+10     	; 0x23da <main+0x78e>
		__ticks = 1;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	9c 8b       	std	Y+20, r25	; 0x14
    23d6:	8b 8b       	std	Y+19, r24	; 0x13
    23d8:	3f c0       	rjmp	.+126    	; 0x2458 <main+0x80c>
	else if (__tmp > 65535)
    23da:	6d 89       	ldd	r22, Y+21	; 0x15
    23dc:	7e 89       	ldd	r23, Y+22	; 0x16
    23de:	8f 89       	ldd	r24, Y+23	; 0x17
    23e0:	98 8d       	ldd	r25, Y+24	; 0x18
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	3f ef       	ldi	r19, 0xFF	; 255
    23e6:	4f e7       	ldi	r20, 0x7F	; 127
    23e8:	57 e4       	ldi	r21, 0x47	; 71
    23ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ee:	18 16       	cp	r1, r24
    23f0:	4c f5       	brge	.+82     	; 0x2444 <main+0x7f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f2:	69 8d       	ldd	r22, Y+25	; 0x19
    23f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e2       	ldi	r20, 0x20	; 32
    2400:	51 e4       	ldi	r21, 0x41	; 65
    2402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9c 8b       	std	Y+20, r25	; 0x14
    2418:	8b 8b       	std	Y+19, r24	; 0x13
    241a:	0f c0       	rjmp	.+30     	; 0x243a <main+0x7ee>
    241c:	80 e9       	ldi	r24, 0x90	; 144
    241e:	91 e0       	ldi	r25, 0x01	; 1
    2420:	9a 8b       	std	Y+18, r25	; 0x12
    2422:	89 8b       	std	Y+17, r24	; 0x11
    2424:	89 89       	ldd	r24, Y+17	; 0x11
    2426:	9a 89       	ldd	r25, Y+18	; 0x12
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <main+0x7dc>
    242c:	9a 8b       	std	Y+18, r25	; 0x12
    242e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2430:	8b 89       	ldd	r24, Y+19	; 0x13
    2432:	9c 89       	ldd	r25, Y+20	; 0x14
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	9c 8b       	std	Y+20, r25	; 0x14
    2438:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243a:	8b 89       	ldd	r24, Y+19	; 0x13
    243c:	9c 89       	ldd	r25, Y+20	; 0x14
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	69 f7       	brne	.-38     	; 0x241c <main+0x7d0>
    2442:	14 c0       	rjmp	.+40     	; 0x246c <main+0x820>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2444:	6d 89       	ldd	r22, Y+21	; 0x15
    2446:	7e 89       	ldd	r23, Y+22	; 0x16
    2448:	8f 89       	ldd	r24, Y+23	; 0x17
    244a:	98 8d       	ldd	r25, Y+24	; 0x18
    244c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	9c 8b       	std	Y+20, r25	; 0x14
    2456:	8b 8b       	std	Y+19, r24	; 0x13
    2458:	8b 89       	ldd	r24, Y+19	; 0x13
    245a:	9c 89       	ldd	r25, Y+20	; 0x14
    245c:	98 8b       	std	Y+16, r25	; 0x10
    245e:	8f 87       	std	Y+15, r24	; 0x0f
    2460:	8f 85       	ldd	r24, Y+15	; 0x0f
    2462:	98 89       	ldd	r25, Y+16	; 0x10
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <main+0x818>
    2468:	98 8b       	std	Y+16, r25	; 0x10
    246a:	8f 87       	std	Y+15, r24	; 0x0f
        			                 _delay_ms(10);
        			                 data -= 5;
    246c:	80 91 7b 01 	lds	r24, 0x017B
    2470:	90 91 7c 01 	lds	r25, 0x017C
    2474:	a0 91 7d 01 	lds	r26, 0x017D
    2478:	b0 91 7e 01 	lds	r27, 0x017E
    247c:	05 97       	sbiw	r24, 0x05	; 5
    247e:	a1 09       	sbc	r26, r1
    2480:	b1 09       	sbc	r27, r1
    2482:	80 93 7b 01 	sts	0x017B, r24
    2486:	90 93 7c 01 	sts	0x017C, r25
    248a:	a0 93 7d 01 	sts	0x017D, r26
    248e:	b0 93 7e 01 	sts	0x017E, r27
        			                 set_temperature = (data*10) ;
    2492:	80 91 7b 01 	lds	r24, 0x017B
    2496:	90 91 7c 01 	lds	r25, 0x017C
    249a:	a0 91 7d 01 	lds	r26, 0x017D
    249e:	b0 91 7e 01 	lds	r27, 0x017E
    24a2:	2a e0       	ldi	r18, 0x0A	; 10
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e0       	ldi	r20, 0x00	; 0
    24a8:	50 e0       	ldi	r21, 0x00	; 0
    24aa:	bc 01       	movw	r22, r24
    24ac:	cd 01       	movw	r24, r26
    24ae:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__mulsi3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	80 93 68 01 	sts	0x0168, r24
    24ba:	90 93 69 01 	sts	0x0169, r25
    24be:	a0 93 6a 01 	sts	0x016A, r26
    24c2:	b0 93 6b 01 	sts	0x016B, r27
        	                         counter_timer = 0 ;
    24c6:	10 92 70 01 	sts	0x0170, r1
    24ca:	10 92 71 01 	sts	0x0171, r1
    24ce:	10 92 72 01 	sts	0x0172, r1
    24d2:	10 92 73 01 	sts	0x0173, r1

        			             }

        			       		 EEPROM_Write_data(4,data);
    24d6:	80 91 7b 01 	lds	r24, 0x017B
    24da:	90 91 7c 01 	lds	r25, 0x017C
    24de:	a0 91 7d 01 	lds	r26, 0x017D
    24e2:	b0 91 7e 01 	lds	r27, 0x017E
    24e6:	98 2f       	mov	r25, r24
    24e8:	84 e0       	ldi	r24, 0x04	; 4
    24ea:	69 2f       	mov	r22, r25
    24ec:	0e 94 b6 0a 	call	0x156c	; 0x156c <EEPROM_Write_data>
        			       		 // minimum temperature to be 35
        			       		 if(data <35 )
    24f0:	80 91 7b 01 	lds	r24, 0x017B
    24f4:	90 91 7c 01 	lds	r25, 0x017C
    24f8:	a0 91 7d 01 	lds	r26, 0x017D
    24fc:	b0 91 7e 01 	lds	r27, 0x017E
    2500:	83 32       	cpi	r24, 0x23	; 35
    2502:	91 05       	cpc	r25, r1
    2504:	a1 05       	cpc	r26, r1
    2506:	b1 05       	cpc	r27, r1
    2508:	30 f5       	brcc	.+76     	; 0x2556 <main+0x90a>
        			       		        {
        			       		           data = 35 ;
    250a:	83 e2       	ldi	r24, 0x23	; 35
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	a0 e0       	ldi	r26, 0x00	; 0
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	80 93 7b 01 	sts	0x017B, r24
    2516:	90 93 7c 01 	sts	0x017C, r25
    251a:	a0 93 7d 01 	sts	0x017D, r26
    251e:	b0 93 7e 01 	sts	0x017E, r27
        			       		           set_temperature = (data*10) ;
    2522:	80 91 7b 01 	lds	r24, 0x017B
    2526:	90 91 7c 01 	lds	r25, 0x017C
    252a:	a0 91 7d 01 	lds	r26, 0x017D
    252e:	b0 91 7e 01 	lds	r27, 0x017E
    2532:	2a e0       	ldi	r18, 0x0A	; 10
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e0       	ldi	r20, 0x00	; 0
    2538:	50 e0       	ldi	r21, 0x00	; 0
    253a:	bc 01       	movw	r22, r24
    253c:	cd 01       	movw	r24, r26
    253e:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__mulsi3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	80 93 68 01 	sts	0x0168, r24
    254a:	90 93 69 01 	sts	0x0169, r25
    254e:	a0 93 6a 01 	sts	0x016A, r26
    2552:	b0 93 6b 01 	sts	0x016B, r27
        			       		        }
        			       		 // maximum temperature to be 75
        			       		        if(data >75 )
    2556:	80 91 7b 01 	lds	r24, 0x017B
    255a:	90 91 7c 01 	lds	r25, 0x017C
    255e:	a0 91 7d 01 	lds	r26, 0x017D
    2562:	b0 91 7e 01 	lds	r27, 0x017E
    2566:	8c 34       	cpi	r24, 0x4C	; 76
    2568:	91 05       	cpc	r25, r1
    256a:	a1 05       	cpc	r26, r1
    256c:	b1 05       	cpc	r27, r1
    256e:	30 f1       	brcs	.+76     	; 0x25bc <main+0x970>
        			       		             {
        			       		                 data = 75 ;
    2570:	8b e4       	ldi	r24, 0x4B	; 75
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	a0 e0       	ldi	r26, 0x00	; 0
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	80 93 7b 01 	sts	0x017B, r24
    257c:	90 93 7c 01 	sts	0x017C, r25
    2580:	a0 93 7d 01 	sts	0x017D, r26
    2584:	b0 93 7e 01 	sts	0x017E, r27
        			       		                 set_temperature = (data*10) ;
    2588:	80 91 7b 01 	lds	r24, 0x017B
    258c:	90 91 7c 01 	lds	r25, 0x017C
    2590:	a0 91 7d 01 	lds	r26, 0x017D
    2594:	b0 91 7e 01 	lds	r27, 0x017E
    2598:	2a e0       	ldi	r18, 0x0A	; 10
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e0       	ldi	r20, 0x00	; 0
    259e:	50 e0       	ldi	r21, 0x00	; 0
    25a0:	bc 01       	movw	r22, r24
    25a2:	cd 01       	movw	r24, r26
    25a4:	0e 94 43 16 	call	0x2c86	; 0x2c86 <__mulsi3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	80 93 68 01 	sts	0x0168, r24
    25b0:	90 93 69 01 	sts	0x0169, r25
    25b4:	a0 93 6a 01 	sts	0x016A, r26
    25b8:	b0 93 6b 01 	sts	0x016B, r27
        			       		             }
        			       		     if (GET_BIT(PIND , 2) == 1 )
    25bc:	e0 e3       	ldi	r30, 0x30	; 48
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	86 95       	lsr	r24
    25c4:	86 95       	lsr	r24
    25c6:	88 2f       	mov	r24, r24
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	81 70       	andi	r24, 0x01	; 1
    25cc:	90 70       	andi	r25, 0x00	; 0
    25ce:	88 23       	and	r24, r24
    25d0:	09 f4       	brne	.+2      	; 0x25d4 <main+0x988>
    25d2:	ee cd       	rjmp	.-1060   	; 0x21b0 <main+0x564>
        			       		     	 {
        			       		     		 while (GET_BIT(PIND,2)==1);
    25d4:	e0 e3       	ldi	r30, 0x30	; 48
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	86 95       	lsr	r24
    25dc:	86 95       	lsr	r24
    25de:	88 2f       	mov	r24, r24
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	81 70       	andi	r24, 0x01	; 1
    25e4:	90 70       	andi	r25, 0x00	; 0
    25e6:	88 23       	and	r24, r24
    25e8:	a9 f7       	brne	.-22     	; 0x25d4 <main+0x988>
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	a0 e2       	ldi	r26, 0x20	; 32
    25f0:	b1 e4       	ldi	r27, 0x41	; 65
    25f2:	8b 87       	std	Y+11, r24	; 0x0b
    25f4:	9c 87       	std	Y+12, r25	; 0x0c
    25f6:	ad 87       	std	Y+13, r26	; 0x0d
    25f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    25fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    25fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2600:	9e 85       	ldd	r25, Y+14	; 0x0e
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	4a e7       	ldi	r20, 0x7A	; 122
    2608:	55 e4       	ldi	r21, 0x45	; 69
    260a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	8f 83       	std	Y+7, r24	; 0x07
    2614:	98 87       	std	Y+8, r25	; 0x08
    2616:	a9 87       	std	Y+9, r26	; 0x09
    2618:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    261a:	6f 81       	ldd	r22, Y+7	; 0x07
    261c:	78 85       	ldd	r23, Y+8	; 0x08
    261e:	89 85       	ldd	r24, Y+9	; 0x09
    2620:	9a 85       	ldd	r25, Y+10	; 0x0a
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	40 e8       	ldi	r20, 0x80	; 128
    2628:	5f e3       	ldi	r21, 0x3F	; 63
    262a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    262e:	88 23       	and	r24, r24
    2630:	2c f4       	brge	.+10     	; 0x263c <main+0x9f0>
		__ticks = 1;
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	9e 83       	std	Y+6, r25	; 0x06
    2638:	8d 83       	std	Y+5, r24	; 0x05
    263a:	3f c0       	rjmp	.+126    	; 0x26ba <main+0xa6e>
	else if (__tmp > 65535)
    263c:	6f 81       	ldd	r22, Y+7	; 0x07
    263e:	78 85       	ldd	r23, Y+8	; 0x08
    2640:	89 85       	ldd	r24, Y+9	; 0x09
    2642:	9a 85       	ldd	r25, Y+10	; 0x0a
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	3f ef       	ldi	r19, 0xFF	; 255
    2648:	4f e7       	ldi	r20, 0x7F	; 127
    264a:	57 e4       	ldi	r21, 0x47	; 71
    264c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2650:	18 16       	cp	r1, r24
    2652:	4c f5       	brge	.+82     	; 0x26a6 <main+0xa5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2654:	6b 85       	ldd	r22, Y+11	; 0x0b
    2656:	7c 85       	ldd	r23, Y+12	; 0x0c
    2658:	8d 85       	ldd	r24, Y+13	; 0x0d
    265a:	9e 85       	ldd	r25, Y+14	; 0x0e
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e2       	ldi	r20, 0x20	; 32
    2662:	51 e4       	ldi	r21, 0x41	; 65
    2664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	bc 01       	movw	r22, r24
    266e:	cd 01       	movw	r24, r26
    2670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	9e 83       	std	Y+6, r25	; 0x06
    267a:	8d 83       	std	Y+5, r24	; 0x05
    267c:	0f c0       	rjmp	.+30     	; 0x269c <main+0xa50>
    267e:	80 e9       	ldi	r24, 0x90	; 144
    2680:	91 e0       	ldi	r25, 0x01	; 1
    2682:	9c 83       	std	Y+4, r25	; 0x04
    2684:	8b 83       	std	Y+3, r24	; 0x03
    2686:	8b 81       	ldd	r24, Y+3	; 0x03
    2688:	9c 81       	ldd	r25, Y+4	; 0x04
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	f1 f7       	brne	.-4      	; 0x268a <main+0xa3e>
    268e:	9c 83       	std	Y+4, r25	; 0x04
    2690:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2692:	8d 81       	ldd	r24, Y+5	; 0x05
    2694:	9e 81       	ldd	r25, Y+6	; 0x06
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	9e 83       	std	Y+6, r25	; 0x06
    269a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269c:	8d 81       	ldd	r24, Y+5	; 0x05
    269e:	9e 81       	ldd	r25, Y+6	; 0x06
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	69 f7       	brne	.-38     	; 0x267e <main+0xa32>
    26a4:	14 c0       	rjmp	.+40     	; 0x26ce <main+0xa82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a6:	6f 81       	ldd	r22, Y+7	; 0x07
    26a8:	78 85       	ldd	r23, Y+8	; 0x08
    26aa:	89 85       	ldd	r24, Y+9	; 0x09
    26ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	9e 83       	std	Y+6, r25	; 0x06
    26b8:	8d 83       	std	Y+5, r24	; 0x05
    26ba:	8d 81       	ldd	r24, Y+5	; 0x05
    26bc:	9e 81       	ldd	r25, Y+6	; 0x06
    26be:	9a 83       	std	Y+2, r25	; 0x02
    26c0:	89 83       	std	Y+1, r24	; 0x01
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	9a 81       	ldd	r25, Y+2	; 0x02
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <main+0xa7a>
    26ca:	9a 83       	std	Y+2, r25	; 0x02
    26cc:	89 83       	std	Y+1, r24	; 0x01
        			       		     		   _delay_ms(10);
        			       		     			 power_flag++ ;
    26ce:	80 91 74 01 	lds	r24, 0x0174
    26d2:	8f 5f       	subi	r24, 0xFF	; 255
    26d4:	80 93 74 01 	sts	0x0174, r24
        			       		     		 if(power_flag % 2 ==0)
    26d8:	80 91 74 01 	lds	r24, 0x0174
    26dc:	88 2f       	mov	r24, r24
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	81 70       	andi	r24, 0x01	; 1
    26e2:	90 70       	andi	r25, 0x00	; 0
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	09 f4       	brne	.+2      	; 0x26ea <main+0xa9e>
    26e8:	e6 ca       	rjmp	.-2612   	; 0x1cb6 <main+0x6a>
    26ea:	62 cd       	rjmp	.-1340   	; 0x21b0 <main+0x564>

000026ec <intit_pins>:
#include "Dio_Reg.h"
#include "segment.h"
#include<avr/delay.h>

void intit_pins(void)
{
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinDirection(GroupB, PIN1, OUTPUT);
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	61 e0       	ldi	r22, 0x01	; 1
    26f8:	41 e0       	ldi	r20, 0x01	; 1
    26fa:	0e 94 18 08 	call	0x1030	; 0x1030 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB, PIN2, OUTPUT);
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	62 e0       	ldi	r22, 0x02	; 2
    2702:	41 e0       	ldi	r20, 0x01	; 1
    2704:	0e 94 18 08 	call	0x1030	; 0x1030 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupA,  PIN4, OUTPUT);
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	64 e0       	ldi	r22, 0x04	; 4
    270c:	41 e0       	ldi	r20, 0x01	; 1
    270e:	0e 94 18 08 	call	0x1030	; 0x1030 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupA,  PIN5, OUTPUT);
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	65 e0       	ldi	r22, 0x05	; 5
    2716:	41 e0       	ldi	r20, 0x01	; 1
    2718:	0e 94 18 08 	call	0x1030	; 0x1030 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupA,  PIN6, OUTPUT);
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	66 e0       	ldi	r22, 0x06	; 6
    2720:	41 e0       	ldi	r20, 0x01	; 1
    2722:	0e 94 18 08 	call	0x1030	; 0x1030 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupA,  PIN7, OUTPUT);
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	67 e0       	ldi	r22, 0x07	; 7
    272a:	41 e0       	ldi	r20, 0x01	; 1
    272c:	0e 94 18 08 	call	0x1030	; 0x1030 <Dio_SetPinDirection>

}
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <display>:
void display (u32 i)
{
    2736:	0f 93       	push	r16
    2738:	1f 93       	push	r17
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	a2 97       	sbiw	r28, 0x22	; 34
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	6f 8f       	std	Y+31, r22	; 0x1f
    2750:	78 a3       	std	Y+32, r23	; 0x20
    2752:	89 a3       	std	Y+33, r24	; 0x21
    2754:	9a a3       	std	Y+34, r25	; 0x22
  // for (int i = 0 ; i<=99 ; i++)
             //   {
                    for (int j = 0 ; j <19; j++)
    2756:	1e 8e       	std	Y+30, r1	; 0x1e
    2758:	1d 8e       	std	Y+29, r1	; 0x1d
    275a:	35 c1       	rjmp	.+618    	; 0x29c6 <display+0x290>
                    {

                    Dio_SetPinValue(GroupB, PIN2, HIGH);
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	62 e0       	ldi	r22, 0x02	; 2
    2760:	41 e0       	ldi	r20, 0x01	; 1
    2762:	0e 94 20 09 	call	0x1240	; 0x1240 <Dio_SetPinValue>
                    Dio_SetPinValue(GroupB, PIN1, LOW);
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	61 e0       	ldi	r22, 0x01	; 1
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	0e 94 20 09 	call	0x1240	; 0x1240 <Dio_SetPinValue>
                    PORTA = (i / 10) <<4;
    2770:	0b e3       	ldi	r16, 0x3B	; 59
    2772:	10 e0       	ldi	r17, 0x00	; 0
    2774:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2776:	98 a1       	ldd	r25, Y+32	; 0x20
    2778:	a9 a1       	ldd	r26, Y+33	; 0x21
    277a:	ba a1       	ldd	r27, Y+34	; 0x22
    277c:	2a e0       	ldi	r18, 0x0A	; 10
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	50 e0       	ldi	r21, 0x00	; 0
    2784:	bc 01       	movw	r22, r24
    2786:	cd 01       	movw	r24, r26
    2788:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__udivmodsi4>
    278c:	da 01       	movw	r26, r20
    278e:	c9 01       	movw	r24, r18
    2790:	82 95       	swap	r24
    2792:	80 7f       	andi	r24, 0xF0	; 240
    2794:	f8 01       	movw	r30, r16
    2796:	80 83       	st	Z, r24
                    _delay_ms(j);
    2798:	8d 8d       	ldd	r24, Y+29	; 0x1d
    279a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    279c:	aa 27       	eor	r26, r26
    279e:	97 fd       	sbrc	r25, 7
    27a0:	a0 95       	com	r26
    27a2:	ba 2f       	mov	r27, r26
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	89 8f       	std	Y+25, r24	; 0x19
    27b2:	9a 8f       	std	Y+26, r25	; 0x1a
    27b4:	ab 8f       	std	Y+27, r26	; 0x1b
    27b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b8:	69 8d       	ldd	r22, Y+25	; 0x19
    27ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	4a e7       	ldi	r20, 0x7A	; 122
    27c6:	55 e4       	ldi	r21, 0x45	; 69
    27c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	8d 8b       	std	Y+21, r24	; 0x15
    27d2:	9e 8b       	std	Y+22, r25	; 0x16
    27d4:	af 8b       	std	Y+23, r26	; 0x17
    27d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27d8:	6d 89       	ldd	r22, Y+21	; 0x15
    27da:	7e 89       	ldd	r23, Y+22	; 0x16
    27dc:	8f 89       	ldd	r24, Y+23	; 0x17
    27de:	98 8d       	ldd	r25, Y+24	; 0x18
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	40 e8       	ldi	r20, 0x80	; 128
    27e6:	5f e3       	ldi	r21, 0x3F	; 63
    27e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ec:	88 23       	and	r24, r24
    27ee:	2c f4       	brge	.+10     	; 0x27fa <display+0xc4>
		__ticks = 1;
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	9c 8b       	std	Y+20, r25	; 0x14
    27f6:	8b 8b       	std	Y+19, r24	; 0x13
    27f8:	3f c0       	rjmp	.+126    	; 0x2878 <display+0x142>
	else if (__tmp > 65535)
    27fa:	6d 89       	ldd	r22, Y+21	; 0x15
    27fc:	7e 89       	ldd	r23, Y+22	; 0x16
    27fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2800:	98 8d       	ldd	r25, Y+24	; 0x18
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	3f ef       	ldi	r19, 0xFF	; 255
    2806:	4f e7       	ldi	r20, 0x7F	; 127
    2808:	57 e4       	ldi	r21, 0x47	; 71
    280a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    280e:	18 16       	cp	r1, r24
    2810:	4c f5       	brge	.+82     	; 0x2864 <display+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2812:	69 8d       	ldd	r22, Y+25	; 0x19
    2814:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2816:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2818:	9c 8d       	ldd	r25, Y+28	; 0x1c
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e2       	ldi	r20, 0x20	; 32
    2820:	51 e4       	ldi	r21, 0x41	; 65
    2822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	bc 01       	movw	r22, r24
    282c:	cd 01       	movw	r24, r26
    282e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	9c 8b       	std	Y+20, r25	; 0x14
    2838:	8b 8b       	std	Y+19, r24	; 0x13
    283a:	0f c0       	rjmp	.+30     	; 0x285a <display+0x124>
    283c:	80 e9       	ldi	r24, 0x90	; 144
    283e:	91 e0       	ldi	r25, 0x01	; 1
    2840:	9a 8b       	std	Y+18, r25	; 0x12
    2842:	89 8b       	std	Y+17, r24	; 0x11
    2844:	89 89       	ldd	r24, Y+17	; 0x11
    2846:	9a 89       	ldd	r25, Y+18	; 0x12
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <display+0x112>
    284c:	9a 8b       	std	Y+18, r25	; 0x12
    284e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2850:	8b 89       	ldd	r24, Y+19	; 0x13
    2852:	9c 89       	ldd	r25, Y+20	; 0x14
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	9c 8b       	std	Y+20, r25	; 0x14
    2858:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285a:	8b 89       	ldd	r24, Y+19	; 0x13
    285c:	9c 89       	ldd	r25, Y+20	; 0x14
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	69 f7       	brne	.-38     	; 0x283c <display+0x106>
    2862:	14 c0       	rjmp	.+40     	; 0x288c <display+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2864:	6d 89       	ldd	r22, Y+21	; 0x15
    2866:	7e 89       	ldd	r23, Y+22	; 0x16
    2868:	8f 89       	ldd	r24, Y+23	; 0x17
    286a:	98 8d       	ldd	r25, Y+24	; 0x18
    286c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	9c 8b       	std	Y+20, r25	; 0x14
    2876:	8b 8b       	std	Y+19, r24	; 0x13
    2878:	8b 89       	ldd	r24, Y+19	; 0x13
    287a:	9c 89       	ldd	r25, Y+20	; 0x14
    287c:	98 8b       	std	Y+16, r25	; 0x10
    287e:	8f 87       	std	Y+15, r24	; 0x0f
    2880:	8f 85       	ldd	r24, Y+15	; 0x0f
    2882:	98 89       	ldd	r25, Y+16	; 0x10
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <display+0x14e>
    2888:	98 8b       	std	Y+16, r25	; 0x10
    288a:	8f 87       	std	Y+15, r24	; 0x0f
                  Dio_SetPinValue(GroupB, PIN1, HIGH);
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	61 e0       	ldi	r22, 0x01	; 1
    2890:	41 e0       	ldi	r20, 0x01	; 1
    2892:	0e 94 20 09 	call	0x1240	; 0x1240 <Dio_SetPinValue>
                    Dio_SetPinValue(GroupB, PIN2, LOW);
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	62 e0       	ldi	r22, 0x02	; 2
    289a:	40 e0       	ldi	r20, 0x00	; 0
    289c:	0e 94 20 09 	call	0x1240	; 0x1240 <Dio_SetPinValue>
                    PORTA = (i % 10) <<4;
    28a0:	0b e3       	ldi	r16, 0x3B	; 59
    28a2:	10 e0       	ldi	r17, 0x00	; 0
    28a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28a6:	98 a1       	ldd	r25, Y+32	; 0x20
    28a8:	a9 a1       	ldd	r26, Y+33	; 0x21
    28aa:	ba a1       	ldd	r27, Y+34	; 0x22
    28ac:	2a e0       	ldi	r18, 0x0A	; 10
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	bc 01       	movw	r22, r24
    28b6:	cd 01       	movw	r24, r26
    28b8:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__udivmodsi4>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	82 95       	swap	r24
    28c2:	80 7f       	andi	r24, 0xF0	; 240
    28c4:	f8 01       	movw	r30, r16
    28c6:	80 83       	st	Z, r24
                     _delay_ms(j);
    28c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28cc:	aa 27       	eor	r26, r26
    28ce:	97 fd       	sbrc	r25, 7
    28d0:	a0 95       	com	r26
    28d2:	ba 2f       	mov	r27, r26
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	8b 87       	std	Y+11, r24	; 0x0b
    28e2:	9c 87       	std	Y+12, r25	; 0x0c
    28e4:	ad 87       	std	Y+13, r26	; 0x0d
    28e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	4a e7       	ldi	r20, 0x7A	; 122
    28f6:	55 e4       	ldi	r21, 0x45	; 69
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	8f 83       	std	Y+7, r24	; 0x07
    2902:	98 87       	std	Y+8, r25	; 0x08
    2904:	a9 87       	std	Y+9, r26	; 0x09
    2906:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2908:	6f 81       	ldd	r22, Y+7	; 0x07
    290a:	78 85       	ldd	r23, Y+8	; 0x08
    290c:	89 85       	ldd	r24, Y+9	; 0x09
    290e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e8       	ldi	r20, 0x80	; 128
    2916:	5f e3       	ldi	r21, 0x3F	; 63
    2918:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    291c:	88 23       	and	r24, r24
    291e:	2c f4       	brge	.+10     	; 0x292a <display+0x1f4>
		__ticks = 1;
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
    2928:	3f c0       	rjmp	.+126    	; 0x29a8 <display+0x272>
	else if (__tmp > 65535)
    292a:	6f 81       	ldd	r22, Y+7	; 0x07
    292c:	78 85       	ldd	r23, Y+8	; 0x08
    292e:	89 85       	ldd	r24, Y+9	; 0x09
    2930:	9a 85       	ldd	r25, Y+10	; 0x0a
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	3f ef       	ldi	r19, 0xFF	; 255
    2936:	4f e7       	ldi	r20, 0x7F	; 127
    2938:	57 e4       	ldi	r21, 0x47	; 71
    293a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    293e:	18 16       	cp	r1, r24
    2940:	4c f5       	brge	.+82     	; 0x2994 <display+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2942:	6b 85       	ldd	r22, Y+11	; 0x0b
    2944:	7c 85       	ldd	r23, Y+12	; 0x0c
    2946:	8d 85       	ldd	r24, Y+13	; 0x0d
    2948:	9e 85       	ldd	r25, Y+14	; 0x0e
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e2       	ldi	r20, 0x20	; 32
    2950:	51 e4       	ldi	r21, 0x41	; 65
    2952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	bc 01       	movw	r22, r24
    295c:	cd 01       	movw	r24, r26
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	9e 83       	std	Y+6, r25	; 0x06
    2968:	8d 83       	std	Y+5, r24	; 0x05
    296a:	0f c0       	rjmp	.+30     	; 0x298a <display+0x254>
    296c:	80 e9       	ldi	r24, 0x90	; 144
    296e:	91 e0       	ldi	r25, 0x01	; 1
    2970:	9c 83       	std	Y+4, r25	; 0x04
    2972:	8b 83       	std	Y+3, r24	; 0x03
    2974:	8b 81       	ldd	r24, Y+3	; 0x03
    2976:	9c 81       	ldd	r25, Y+4	; 0x04
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <display+0x242>
    297c:	9c 83       	std	Y+4, r25	; 0x04
    297e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	9e 83       	std	Y+6, r25	; 0x06
    2988:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298a:	8d 81       	ldd	r24, Y+5	; 0x05
    298c:	9e 81       	ldd	r25, Y+6	; 0x06
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	69 f7       	brne	.-38     	; 0x296c <display+0x236>
    2992:	14 c0       	rjmp	.+40     	; 0x29bc <display+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2994:	6f 81       	ldd	r22, Y+7	; 0x07
    2996:	78 85       	ldd	r23, Y+8	; 0x08
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	9e 83       	std	Y+6, r25	; 0x06
    29a6:	8d 83       	std	Y+5, r24	; 0x05
    29a8:	8d 81       	ldd	r24, Y+5	; 0x05
    29aa:	9e 81       	ldd	r25, Y+6	; 0x06
    29ac:	9a 83       	std	Y+2, r25	; 0x02
    29ae:	89 83       	std	Y+1, r24	; 0x01
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	9a 81       	ldd	r25, Y+2	; 0x02
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <display+0x27e>
    29b8:	9a 83       	std	Y+2, r25	; 0x02
    29ba:	89 83       	std	Y+1, r24	; 0x01
}
void display (u32 i)
{
  // for (int i = 0 ; i<=99 ; i++)
             //   {
                    for (int j = 0 ; j <19; j++)
    29bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29c0:	01 96       	adiw	r24, 0x01	; 1
    29c2:	9e 8f       	std	Y+30, r25	; 0x1e
    29c4:	8d 8f       	std	Y+29, r24	; 0x1d
    29c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29ca:	83 31       	cpi	r24, 0x13	; 19
    29cc:	91 05       	cpc	r25, r1
    29ce:	0c f4       	brge	.+2      	; 0x29d2 <display+0x29c>
    29d0:	c5 ce       	rjmp	.-630    	; 0x275c <display+0x26>
                    Dio_SetPinValue(GroupB, PIN2, LOW);
                    PORTA = (i % 10) <<4;
                     _delay_ms(j);
                   }
           //  }
}
    29d2:	a2 96       	adiw	r28, 0x22	; 34
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	cd bf       	out	0x3d, r28	; 61
    29de:	cf 91       	pop	r28
    29e0:	df 91       	pop	r29
    29e2:	1f 91       	pop	r17
    29e4:	0f 91       	pop	r16
    29e6:	08 95       	ret

000029e8 <timer_init>:

u16 counter0 = 0;


void timer_init()
{
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62

	//Enabling GIE
	SET_BIT(SREG, 7);
    29f0:	af e5       	ldi	r26, 0x5F	; 95
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	ef e5       	ldi	r30, 0x5F	; 95
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	80 68       	ori	r24, 0x80	; 128
    29fc:	8c 93       	st	X, r24

	//Enabling normal mode
	CLR_BIT(TCCR0, 3);
    29fe:	a3 e5       	ldi	r26, 0x53	; 83
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	e3 e5       	ldi	r30, 0x53	; 83
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	87 7f       	andi	r24, 0xF7	; 247
    2a0a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, 6);
    2a0c:	a3 e5       	ldi	r26, 0x53	; 83
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e3 e5       	ldi	r30, 0x53	; 83
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	8f 7b       	andi	r24, 0xBF	; 191
    2a18:	8c 93       	st	X, r24


	//Setting prescaler to 64
	SET_BIT(TCCR0, 0);
    2a1a:	a3 e5       	ldi	r26, 0x53	; 83
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e3 e5       	ldi	r30, 0x53	; 83
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	81 60       	ori	r24, 0x01	; 1
    2a26:	8c 93       	st	X, r24
	SET_BIT(TCCR0, 1);
    2a28:	a3 e5       	ldi	r26, 0x53	; 83
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	e3 e5       	ldi	r30, 0x53	; 83
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	82 60       	ori	r24, 0x02	; 2
    2a34:	8c 93       	st	X, r24
	SET_BIT(TCCR0, 2);*/

	//CLEAR_BIT(TCCR0, 2);

	//Initialize TCNT0
      TCNT0 = 48;
    2a36:	e2 e5       	ldi	r30, 0x52	; 82
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 e3       	ldi	r24, 0x30	; 48
    2a3c:	80 83       	st	Z, r24

	//Enabling Over flow Interrupt
	SET_BIT(TIMSK, 0);
    2a3e:	a9 e5       	ldi	r26, 0x59	; 89
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	e9 e5       	ldi	r30, 0x59	; 89
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	81 60       	ori	r24, 0x01	; 1
    2a4a:	8c 93       	st	X, r24



}
    2a4c:	cf 91       	pop	r28
    2a4e:	df 91       	pop	r29
    2a50:	08 95       	ret

00002a52 <__vector_11>:



ISR(TIMER0_OVF_vect)
{
    2a52:	1f 92       	push	r1
    2a54:	0f 92       	push	r0
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	0f 92       	push	r0
    2a5a:	11 24       	eor	r1, r1
    2a5c:	2f 93       	push	r18
    2a5e:	8f 93       	push	r24
    2a60:	9f 93       	push	r25
    2a62:	ef 93       	push	r30
    2a64:	ff 93       	push	r31
    2a66:	df 93       	push	r29
    2a68:	cf 93       	push	r28
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(DDRC, 7);
    counter0++;
    2a6e:	80 91 75 01 	lds	r24, 0x0175
    2a72:	90 91 76 01 	lds	r25, 0x0176
    2a76:	01 96       	adiw	r24, 0x01	; 1
    2a78:	90 93 76 01 	sts	0x0176, r25
    2a7c:	80 93 75 01 	sts	0x0175, r24
		if(counter0 == 4883)
    2a80:	80 91 75 01 	lds	r24, 0x0175
    2a84:	90 91 76 01 	lds	r25, 0x0176
    2a88:	23 e1       	ldi	r18, 0x13	; 19
    2a8a:	83 31       	cpi	r24, 0x13	; 19
    2a8c:	92 07       	cpc	r25, r18
    2a8e:	41 f4       	brne	.+16     	; 0x2aa0 <__vector_11+0x4e>
		{
			//TOG_BIT(PORTC, 7);
		    //Re-initialize the timer
			counter0 = 0;
    2a90:	10 92 76 01 	sts	0x0176, r1
    2a94:	10 92 75 01 	sts	0x0175, r1
			TCNT0 = 48;
    2a98:	e2 e5       	ldi	r30, 0x52	; 82
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 e3       	ldi	r24, 0x30	; 48
    2a9e:	80 83       	st	Z, r24


		}
}
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	ff 91       	pop	r31
    2aa6:	ef 91       	pop	r30
    2aa8:	9f 91       	pop	r25
    2aaa:	8f 91       	pop	r24
    2aac:	2f 91       	pop	r18
    2aae:	0f 90       	pop	r0
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	0f 90       	pop	r0
    2ab4:	1f 90       	pop	r1
    2ab6:	18 95       	reti

00002ab8 <timer1_init>:



void timer1_init()

{
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
	//Enabling GIE
		SET_BIT(SREG, 7);
    2ac0:	af e5       	ldi	r26, 0x5F	; 95
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	ef e5       	ldi	r30, 0x5F	; 95
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	80 68       	ori	r24, 0x80	; 128
    2acc:	8c 93       	st	X, r24

		//Enabling normal mode
		CLR_BIT(TCCR2, 3);
    2ace:	a5 e4       	ldi	r26, 0x45	; 69
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	e5 e4       	ldi	r30, 0x45	; 69
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	87 7f       	andi	r24, 0xF7	; 247
    2ada:	8c 93       	st	X, r24
		CLR_BIT(TCCR2, 6);
    2adc:	a5 e4       	ldi	r26, 0x45	; 69
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e5 e4       	ldi	r30, 0x45	; 69
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	8f 7b       	andi	r24, 0xBF	; 191
    2ae8:	8c 93       	st	X, r24


		//Setting prescaler to 64
		SET_BIT(TCCR1B, 0);
    2aea:	ae e4       	ldi	r26, 0x4E	; 78
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	ee e4       	ldi	r30, 0x4E	; 78
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	81 60       	ori	r24, 0x01	; 1
    2af6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B, 1);
    2af8:	ae e4       	ldi	r26, 0x4E	; 78
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	ee e4       	ldi	r30, 0x4E	; 78
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	80 81       	ld	r24, Z
    2b02:	82 60       	ori	r24, 0x02	; 2
    2b04:	8c 93       	st	X, r24


		//CLEAR_BIT(TCCR0, 2);

		//Initialize TCNT0
	      TCNT1 = 40540;
    2b06:	ec e4       	ldi	r30, 0x4C	; 76
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	8c e5       	ldi	r24, 0x5C	; 92
    2b0c:	9e e9       	ldi	r25, 0x9E	; 158
    2b0e:	91 83       	std	Z+1, r25	; 0x01
    2b10:	80 83       	st	Z, r24

		//Enabling Over flow Interrupt
		SET_BIT(TIMSK, 2);
    2b12:	a9 e5       	ldi	r26, 0x59	; 89
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	e9 e5       	ldi	r30, 0x59	; 89
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	80 81       	ld	r24, Z
    2b1c:	84 60       	ori	r24, 0x04	; 4
    2b1e:	8c 93       	st	X, r24

}
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <__vector_9>:



ISR(TIMER1_OVF_vect)

{
    2b26:	1f 92       	push	r1
    2b28:	0f 92       	push	r0
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	0f 92       	push	r0
    2b2e:	11 24       	eor	r1, r1
    2b30:	2f 93       	push	r18
    2b32:	8f 93       	push	r24
    2b34:	9f 93       	push	r25
    2b36:	ef 93       	push	r30
    2b38:	ff 93       	push	r31
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
	 counter1++;
    2b42:	80 91 77 01 	lds	r24, 0x0177
    2b46:	90 91 78 01 	lds	r25, 0x0178
    2b4a:	01 96       	adiw	r24, 0x01	; 1
    2b4c:	90 93 78 01 	sts	0x0178, r25
    2b50:	80 93 77 01 	sts	0x0177, r24
			if(counter1 == 24995)
    2b54:	80 91 77 01 	lds	r24, 0x0177
    2b58:	90 91 78 01 	lds	r25, 0x0178
    2b5c:	21 e6       	ldi	r18, 0x61	; 97
    2b5e:	83 3a       	cpi	r24, 0xA3	; 163
    2b60:	92 07       	cpc	r25, r18
    2b62:	51 f4       	brne	.+20     	; 0x2b78 <__vector_9+0x52>
			{
				counter1 = 0;
    2b64:	10 92 78 01 	sts	0x0178, r1
    2b68:	10 92 77 01 	sts	0x0177, r1
				TCNT1 = 40540;
    2b6c:	ec e4       	ldi	r30, 0x4C	; 76
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	8c e5       	ldi	r24, 0x5C	; 92
    2b72:	9e e9       	ldi	r25, 0x9E	; 158
    2b74:	91 83       	std	Z+1, r25	; 0x01
    2b76:	80 83       	st	Z, r24
			}
}
    2b78:	cf 91       	pop	r28
    2b7a:	df 91       	pop	r29
    2b7c:	ff 91       	pop	r31
    2b7e:	ef 91       	pop	r30
    2b80:	9f 91       	pop	r25
    2b82:	8f 91       	pop	r24
    2b84:	2f 91       	pop	r18
    2b86:	0f 90       	pop	r0
    2b88:	0f be       	out	0x3f, r0	; 63
    2b8a:	0f 90       	pop	r0
    2b8c:	1f 90       	pop	r1
    2b8e:	18 95       	reti

00002b90 <timer2_init>:




void timer2_init()
{
    2b90:	df 93       	push	r29
    2b92:	cf 93       	push	r28
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62

	//Enabling GIE
	SET_BIT(SREG, 7);
    2b98:	af e5       	ldi	r26, 0x5F	; 95
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	ef e5       	ldi	r30, 0x5F	; 95
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	80 68       	ori	r24, 0x80	; 128
    2ba4:	8c 93       	st	X, r24

	//Enabling normal mode
	CLR_BIT(TCCR2, 3);
    2ba6:	a5 e4       	ldi	r26, 0x45	; 69
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	e5 e4       	ldi	r30, 0x45	; 69
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	87 7f       	andi	r24, 0xF7	; 247
    2bb2:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, 6);
    2bb4:	a5 e4       	ldi	r26, 0x45	; 69
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	e5 e4       	ldi	r30, 0x45	; 69
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	8f 7b       	andi	r24, 0xBF	; 191
    2bc0:	8c 93       	st	X, r24


	//Setting prescaler to 64
	SET_BIT(TCCR2, 0);
    2bc2:	a5 e4       	ldi	r26, 0x45	; 69
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	e5 e4       	ldi	r30, 0x45	; 69
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	81 60       	ori	r24, 0x01	; 1
    2bce:	8c 93       	st	X, r24
	SET_BIT(TCCR2, 1);
    2bd0:	a5 e4       	ldi	r26, 0x45	; 69
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	e5 e4       	ldi	r30, 0x45	; 69
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	82 60       	ori	r24, 0x02	; 2
    2bdc:	8c 93       	st	X, r24


	//CLEAR_BIT(TCCR0, 2);

	//Initialize TCNT0
      TCNT2 = 112;
    2bde:	e4 e4       	ldi	r30, 0x44	; 68
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 e7       	ldi	r24, 0x70	; 112
    2be4:	80 83       	st	Z, r24

	//Enabling Over flow Interrupt
	SET_BIT(TIMSK, 6);
    2be6:	a9 e5       	ldi	r26, 0x59	; 89
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	e9 e5       	ldi	r30, 0x59	; 89
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	80 81       	ld	r24, Z
    2bf0:	80 64       	ori	r24, 0x40	; 64
    2bf2:	8c 93       	st	X, r24



}
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <__vector_5>:


// 1 second timer
ISR(TIMER2_OVF_vect)
{
    2bfa:	1f 92       	push	r1
    2bfc:	0f 92       	push	r0
    2bfe:	0f b6       	in	r0, 0x3f	; 63
    2c00:	0f 92       	push	r0
    2c02:	11 24       	eor	r1, r1
    2c04:	2f 93       	push	r18
    2c06:	8f 93       	push	r24
    2c08:	9f 93       	push	r25
    2c0a:	af 93       	push	r26
    2c0c:	bf 93       	push	r27
    2c0e:	ef 93       	push	r30
    2c10:	ff 93       	push	r31
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62

    counter2++;
    2c1a:	80 91 79 01 	lds	r24, 0x0179
    2c1e:	90 91 7a 01 	lds	r25, 0x017A
    2c22:	01 96       	adiw	r24, 0x01	; 1
    2c24:	90 93 7a 01 	sts	0x017A, r25
    2c28:	80 93 79 01 	sts	0x0179, r24
		if(counter2 == 977)
    2c2c:	80 91 79 01 	lds	r24, 0x0179
    2c30:	90 91 7a 01 	lds	r25, 0x017A
    2c34:	23 e0       	ldi	r18, 0x03	; 3
    2c36:	81 3d       	cpi	r24, 0xD1	; 209
    2c38:	92 07       	cpc	r25, r18
    2c3a:	b9 f4       	brne	.+46     	; 0x2c6a <__vector_5+0x70>
		{
			SET_BIT(DDRD,3);
    2c3c:	a1 e3       	ldi	r26, 0x31	; 49
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	e1 e3       	ldi	r30, 0x31	; 49
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	88 60       	ori	r24, 0x08	; 8
    2c48:	8c 93       	st	X, r24
		    TOG_BIT(PORTD,3);
    2c4a:	a2 e3       	ldi	r26, 0x32	; 50
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	e2 e3       	ldi	r30, 0x32	; 50
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	90 81       	ld	r25, Z
    2c54:	88 e0       	ldi	r24, 0x08	; 8
    2c56:	89 27       	eor	r24, r25
    2c58:	8c 93       	st	X, r24


		   /* SET_BIT(DDRC, 7);
		    TOG_BIT(PORTC, 7);*/
		    //Re-initialize the timer
			counter2 = 0;
    2c5a:	10 92 7a 01 	sts	0x017A, r1
    2c5e:	10 92 79 01 	sts	0x0179, r1
			TCNT2 = 112;
    2c62:	e4 e4       	ldi	r30, 0x44	; 68
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 e7       	ldi	r24, 0x70	; 112
    2c68:	80 83       	st	Z, r24


		}
}
    2c6a:	cf 91       	pop	r28
    2c6c:	df 91       	pop	r29
    2c6e:	ff 91       	pop	r31
    2c70:	ef 91       	pop	r30
    2c72:	bf 91       	pop	r27
    2c74:	af 91       	pop	r26
    2c76:	9f 91       	pop	r25
    2c78:	8f 91       	pop	r24
    2c7a:	2f 91       	pop	r18
    2c7c:	0f 90       	pop	r0
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	0f 90       	pop	r0
    2c82:	1f 90       	pop	r1
    2c84:	18 95       	reti

00002c86 <__mulsi3>:
    2c86:	62 9f       	mul	r22, r18
    2c88:	d0 01       	movw	r26, r0
    2c8a:	73 9f       	mul	r23, r19
    2c8c:	f0 01       	movw	r30, r0
    2c8e:	82 9f       	mul	r24, r18
    2c90:	e0 0d       	add	r30, r0
    2c92:	f1 1d       	adc	r31, r1
    2c94:	64 9f       	mul	r22, r20
    2c96:	e0 0d       	add	r30, r0
    2c98:	f1 1d       	adc	r31, r1
    2c9a:	92 9f       	mul	r25, r18
    2c9c:	f0 0d       	add	r31, r0
    2c9e:	83 9f       	mul	r24, r19
    2ca0:	f0 0d       	add	r31, r0
    2ca2:	74 9f       	mul	r23, r20
    2ca4:	f0 0d       	add	r31, r0
    2ca6:	65 9f       	mul	r22, r21
    2ca8:	f0 0d       	add	r31, r0
    2caa:	99 27       	eor	r25, r25
    2cac:	72 9f       	mul	r23, r18
    2cae:	b0 0d       	add	r27, r0
    2cb0:	e1 1d       	adc	r30, r1
    2cb2:	f9 1f       	adc	r31, r25
    2cb4:	63 9f       	mul	r22, r19
    2cb6:	b0 0d       	add	r27, r0
    2cb8:	e1 1d       	adc	r30, r1
    2cba:	f9 1f       	adc	r31, r25
    2cbc:	bd 01       	movw	r22, r26
    2cbe:	cf 01       	movw	r24, r30
    2cc0:	11 24       	eor	r1, r1
    2cc2:	08 95       	ret

00002cc4 <__udivmodsi4>:
    2cc4:	a1 e2       	ldi	r26, 0x21	; 33
    2cc6:	1a 2e       	mov	r1, r26
    2cc8:	aa 1b       	sub	r26, r26
    2cca:	bb 1b       	sub	r27, r27
    2ccc:	fd 01       	movw	r30, r26
    2cce:	0d c0       	rjmp	.+26     	; 0x2cea <__udivmodsi4_ep>

00002cd0 <__udivmodsi4_loop>:
    2cd0:	aa 1f       	adc	r26, r26
    2cd2:	bb 1f       	adc	r27, r27
    2cd4:	ee 1f       	adc	r30, r30
    2cd6:	ff 1f       	adc	r31, r31
    2cd8:	a2 17       	cp	r26, r18
    2cda:	b3 07       	cpc	r27, r19
    2cdc:	e4 07       	cpc	r30, r20
    2cde:	f5 07       	cpc	r31, r21
    2ce0:	20 f0       	brcs	.+8      	; 0x2cea <__udivmodsi4_ep>
    2ce2:	a2 1b       	sub	r26, r18
    2ce4:	b3 0b       	sbc	r27, r19
    2ce6:	e4 0b       	sbc	r30, r20
    2ce8:	f5 0b       	sbc	r31, r21

00002cea <__udivmodsi4_ep>:
    2cea:	66 1f       	adc	r22, r22
    2cec:	77 1f       	adc	r23, r23
    2cee:	88 1f       	adc	r24, r24
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	1a 94       	dec	r1
    2cf4:	69 f7       	brne	.-38     	; 0x2cd0 <__udivmodsi4_loop>
    2cf6:	60 95       	com	r22
    2cf8:	70 95       	com	r23
    2cfa:	80 95       	com	r24
    2cfc:	90 95       	com	r25
    2cfe:	9b 01       	movw	r18, r22
    2d00:	ac 01       	movw	r20, r24
    2d02:	bd 01       	movw	r22, r26
    2d04:	cf 01       	movw	r24, r30
    2d06:	08 95       	ret

00002d08 <__prologue_saves__>:
    2d08:	2f 92       	push	r2
    2d0a:	3f 92       	push	r3
    2d0c:	4f 92       	push	r4
    2d0e:	5f 92       	push	r5
    2d10:	6f 92       	push	r6
    2d12:	7f 92       	push	r7
    2d14:	8f 92       	push	r8
    2d16:	9f 92       	push	r9
    2d18:	af 92       	push	r10
    2d1a:	bf 92       	push	r11
    2d1c:	cf 92       	push	r12
    2d1e:	df 92       	push	r13
    2d20:	ef 92       	push	r14
    2d22:	ff 92       	push	r15
    2d24:	0f 93       	push	r16
    2d26:	1f 93       	push	r17
    2d28:	cf 93       	push	r28
    2d2a:	df 93       	push	r29
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
    2d30:	ca 1b       	sub	r28, r26
    2d32:	db 0b       	sbc	r29, r27
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	09 94       	ijmp

00002d40 <__epilogue_restores__>:
    2d40:	2a 88       	ldd	r2, Y+18	; 0x12
    2d42:	39 88       	ldd	r3, Y+17	; 0x11
    2d44:	48 88       	ldd	r4, Y+16	; 0x10
    2d46:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d48:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d50:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d52:	b9 84       	ldd	r11, Y+9	; 0x09
    2d54:	c8 84       	ldd	r12, Y+8	; 0x08
    2d56:	df 80       	ldd	r13, Y+7	; 0x07
    2d58:	ee 80       	ldd	r14, Y+6	; 0x06
    2d5a:	fd 80       	ldd	r15, Y+5	; 0x05
    2d5c:	0c 81       	ldd	r16, Y+4	; 0x04
    2d5e:	1b 81       	ldd	r17, Y+3	; 0x03
    2d60:	aa 81       	ldd	r26, Y+2	; 0x02
    2d62:	b9 81       	ldd	r27, Y+1	; 0x01
    2d64:	ce 0f       	add	r28, r30
    2d66:	d1 1d       	adc	r29, r1
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	f8 94       	cli
    2d6c:	de bf       	out	0x3e, r29	; 62
    2d6e:	0f be       	out	0x3f, r0	; 63
    2d70:	cd bf       	out	0x3d, r28	; 61
    2d72:	ed 01       	movw	r28, r26
    2d74:	08 95       	ret

00002d76 <_exit>:
    2d76:	f8 94       	cli

00002d78 <__stop_program>:
    2d78:	ff cf       	rjmp	.-2      	; 0x2d78 <__stop_program>
